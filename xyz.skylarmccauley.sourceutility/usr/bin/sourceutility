#!/bin/sh 

clear
VER="0.7.3"
echo "sourceutility v$VER"

## ----------------------------------
# Step #1: Define variables
# ----------------------------------
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[1;33m'
STD='\033[0;0;39m'
ROOT="/"

CACHEDIR="/private/var/mobile/Library/Caches/"

SOURCEUTILITYDIR="/sourceutility"
SOURCEUTILITYTMP="/sourceutility/tmp"

SOURCEBACKUPDIR="$SOURCEUTILITYDIR/backups"
SBDRELATIVE="./backups"

SOURCELISTS="/private/etc/apt/sources.list.d" # Will need to copy everything from this directory to complete backup
SOURCELISTSBACKUPDIR="$SOURCEBACKUPDIR/sourcelists"
SOURCELISTSCYDIAD="/private/etc/apt/sources.cydiad" 
SOURCELISTSCYDIADBACKUPDIR="$SOURCEBACKUPDIR/cydiad"

CYDIASOURCESD="/private/etc/apt/cydiasources.d"
CYDIASOURCESDBACKUPDIR="$CYDIASOURCESD/cydiasourcesd"

SILEOSOURCENAME="sileo.sources"
SILEOSOURCELISTCACHE="$CACHEDIR/$SILEOSOURCENAME"
SILEOSOURCELIST="/private/etc/apt/sources.list.d/$SILEOSOURCENAME"

SILEOLISTCACHEBACKUP="$SOURCEBACKUPDIR/sileocache"

CYDIAPREFNAME="com.saurik.Cydia.plist"
PREFSDIR="/private/var/mobile/Library/Preferences"
CYDIAPREFS="$PREFSDIR/$CYDIAPREFNAME"
CYDIAPREFSBACKUPDIR="$SOURCEBACKUPDIR/cydiaprefs"
CYDIAPREFSBACKUP="$CYDIAPREFSBACKUPDIR/$CYDIAPREFNAME"

CYDIACACHEDIR="/private/var/mobile/Library/Caches/com.saurik.Cydia"
CYDIASOURCESCACHE="$CYDIACACHEDIR/sources.list"
CYDIALISTCACHE="$CYDIACACHEDIR/lists"
CYDIACACHEBACKUPDIR="$SOURCEBACKUPDIR/cache"

APTDIR="/private/var/lib/apt"
LOCKFILE="/private/var/lib/apt/lock"
MORECYDIACACHE="/private/var/mobile/Containers/Data/Application/DBA6B427-BEBD-4C95-9F75-BF4830276BF3/Library/Caches/com.saurik.Cydia"

DATE=$(date +%m-%d-%Y)
SOURCEFULLBACKUPZIP="$SOURCEUTILITYDIR/sourcebackup-$DATE.zip"
SFBZRELATIVE="./sourcebackup-$DATE.zip"

CYDIASOURCEBACKUPZIP="$SOURCEUTILITYDIR/source_cydia_backup-$DATE.zip"
CSBZRELATIVE="./source_cydia_backup-$DATE.zip"

SILEOSOURCEBACKUPZIP="$SOURCEUTILITYDIR/source_sileo_backup-$DATE.zip"
SSBZRELATIVE="./source_sileo_backup-$DATE.zip"

ZEBRASOURCEBACKUPZIP="$SOURCEUTILITYDIR/source_zebra_backup-$DATE.zip"
ZSBZRELATIVE="./source_zebra_backup-$DATE.zip"

SYNCADDDIR="$SOURCEUTILITYDIR/sync"
CUSTOMLISTNAME="sourceutility.list"
CUSTOMLIST="$SOURCELISTS/$CUSTOMLISTNAME"

SILEOBUNDLEID_U0="org.juulstar.sileo"
SILEOBUNDLEID_EL="org.coolstar.sileo"
SILEOINSTALLER="com.diatrus.sileo-installer"
CYDIABUNDLEID="cydia"
ZEBRABUNDLEID="xyz.willy.zebra"

ELECTRATMP="./elpckg"
U0TMP="./elupckg"
CYDIATMP="./cydpckg"
SILEOTMP="./sillyopckg"

GITHUBRAW="https://raw.githubusercontent.com/The-Hacker894/sourceutility/master"
SILEORESTORESCRIPT="$GITHUBRAW/restore_sileo.sh"
CYDIARESTORESCRIPT="$GITHUBRAW/restore_cydia.sh"
ZEBRARESTORESCRIPT="$GITHUBRAW/restore_zebra.sh"
FULLRESTORESCRIPT="$GITHUBRAW/restore_full.sh"

ZEBRADIR="/private/var/mobile/Documents/xyz.willy.Zebra"
ZEBRASOURCES="$ZEBRADIR/sources.list"
ZEBRABACKUPDIR="$SOURCEBACKUPDIR/zebra"

# ----------------------------------
# Step #2: User defined function
# ----------------------------------
pause(){ 
    read -p "Press [Enter] to continue..." fackEnterKey 
    }
coming_soon(){ 
    read -p "This feature is coming soon. Press [Enter/Return] to continue" fackEnterKey 
}
check_if_root(){
    if [[ $EUID -ne 0 ]]; then
        echo "Please run this script as root!" 
        exit 1
    fi
}
decide_if_tip() {
    if [ $(( ( RANDOM % 10 )  + 1 )) -gt 7 ]; then
    echo "Tip: Entries with green labels have menus behind them!"
    echo ""
    fi
}
init(){
        check_if_root
    if [ ! -w $ROOT ]; then
	# Root directory is not writeable
        echo -e "${RED}Cannot write to root directory. Try running as root?${STD}"
        pause
        start_menu
    fi

    # If the Source Utility Directory doesn't already exist, create one
    if [ ! -d $SOURCEUTILITYDIR ]; then
        mkdir $SOURCEUTILITYDIR
        echo "Created sourceutility directory!"
    fi

    # If the Source Backup Directory doesn't already exist, create one
    if [ ! -d  $SOURCEBACKUPDIR ]; then
        mkdir $SOURCEBACKUPDIR
        echo "Created backup directory!" 
    fi

    if [ ! -d $SOURCEUTILITYTMP ]; then
        mkdir $SOURCEUTILITYTMP
        echo "Created temp directory!"
    fi
    
}
update_sources() {
    echo "Updating source lists. This may take a while..." && sleep 2
    apt-get update
}
check_connection() {
        URL=$1
        echo $URL

        ex() {
            echo "Could not connect to $URL..."
            pause
        }
        cont() {
            echo "Connection to $URL returned no errors!"
        }
            echo "Checking ability to connect to '$URL'..."
            
            case "$(curl -s --max-time 2 -I $URL | sed 's/^[^ ]*  *\([0-9]\).*/\1/; 1q')" in
        [23]) cont ;;
        5) ex ;;
        *) ex;;
            esac
    
}

reinstall_cydia() {
    
    cd $SOURCEUTILITYDIR
    check_if_root
    killall Cydia
    killall Sileo
    echo "Checking for tmp directory..."
    if [ ! -d $SOURCEUTILITYTMP ]; then
    echo "Creating tmp directory..."
        mkdir $SOURCEUTILITYTMP
    fi
    cd $SOURCEUTILITYTMP
    
    REPO_U0="https://apt.bingner.com"
    REPO_EL="https://electrarepo64.coolstar.org"
    REPO_U0_DARK="https://diatr.us/apt"
    
    u0() {
        check_connection $REPO_U0
        echo "Downloading Elucubratus Packages..."
        curl -o "./$U0TMP" "$REPO_U0/Packages" && sleep 1

        touch "./$CYDIATMP"

        awk '/^Package: cydia$/ {s=NR;next} s && NR<=s+15' "./$U0TMP" &> $CYDIATMP
        CYDIAURL=$REPO_U0/$(awk -F'Filename:' '{print $2}' $CYDIATMP)
        CYDIAURL_CONDENSED="$(echo -e "${CYDIAURL}" | tr -d '[:space:]')"
        rm -f "./$CYDIATMP"
        
        echo "Downloading latest version of Cydia..."
        curl --silent -o ./cydia.deb $CYDIAURL_CONDENSED

        echo "Installing..."
        dpkg -i ./cydia.deb

        echo "Running uicache"
        uicache
        echo "Cleaning up..." 
        rm -f ./cydia.deb
        rm -f "./$U0TMP"
        rm -f "./$CYDIATMP"
        cd /
        echo "Completed installation process for Cydia. You may want to run ldrestart after this script has concluded. "
        pause
        start_menu
    }
    u0_dark() {
        check_connection $REPO_U0_DARK
        echo "Downloading Misceo Packages..."
        curl -o "./$U0TMP" "$REPO_U0_DARK/Packages" && sleep 1

        touch "./$CYDIATMP"

        awk '/^Package: cydia$/ {s=NR;next} s && NR<=s+15' "./$U0TMP" &> $CYDIATMP
        CYDIAURL=$REPO_U0_DARK/$(awk -F'Filename:' '{print $2}' $CYDIATMP)
        CYDIAURL_CONDENSED="$(echo -e "${CYDIAURL}" | tr -d '[:space:]')"
        rm -f "./$CYDIATMP"
        
        echo "Downloading latest version of Cydia..."
        curl --silent -o ./cydia.deb $CYDIAURL_CONDENSED

        echo "Installing..."
        dpkg -i ./cydia.deb

        echo "Running uicache"
        uicache
        echo "Cleaning up..." 
        rm -f ./cydia.deb
        rm -f "./$U0TMP"
        rm -f "./$CYDIATMP"
        cd /
        echo "Completed installation process for Cydia. You may want to run ldrestart after this script has concluded. "
        pause
        start_menu
    }
    el() {
        check_connection $REPO_EL
        echo "Downloading Electra Packages..."
        curl -o "./$ELECTRATMP" "$REPO_EL/Packages" && sleep 1

        touch "./$CYDIATMP"

        awk '/^Package: cydia$/ {s=NR;next} s && NR<=s+15' "./$ELECTRATMP" &> $CYDIATMP
        CYDIAURL=$REPO_EL/$(awk -F'Filename:' '{print $2}' $CYDIATMP)
        CYDIAURL_CONDENSED="$(echo -e "${CYDIAURL}" | tr -d '[:space:]')"
        rm -f "./$CYDIATMP"
        
        echo "Downloading latest version of Cydia..."
        curl --silent -o ./cydia.deb $CYDIAURL_CONDENSED

        echo "Installing..."
        dpkg -i ./cydia.deb

        echo "Running uicache"
        uicache
        echo "Cleaning up..." 
        rm -f ./cydia.deb
        rm -f "./$ELECTRATMP"
        rm -f "./$CYDIATMP"
        cd /
        echo "Completed installation process for Cydia. You may want to run ldrestart after this script has concluded. "
        pause
        start_menu
    }

    which_cydia() {
    clear
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo -e "1. apt.bingner.com (Unc0ver)"
    echo -e "2. diatr.us/apt (Unc0ver Dark)"
    echo -e "3. electrarepo64.coolstar.org (Electra)"
    echo "0. Exit"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    }
    read_cydia_options() {
        local choice
        read -p "Where would you like to download Cydia from? [ 0 - 2 ] " choice
        case $choice in
            1) u0 ;;
            2) u0_dark ;; 
            3) el ;;
            0) start_menu;;
            *) echo -e "${RED}Invalid Option...${STD}" && sleep 2
        esac
    }
    which_cydia
    read_cydia_options
}
reinstall_sileo() {

    cd $SOURCEUTILITYDIR
    check_if_root
    killall Cydia
    killall Sileo
    echo "Checking for tmp directory..."
    if [ ! -d $SOURCEUTILITYTMP ]; then
    echo "Creating tmp directory..."
        mkdir $SOURCEUTILITYTMP
    fi
    cd $SOURCEUTILITYTMP
    REPO_EL="https://electrarepo64.coolstar.org"
    CYDIADL_EL="$REPO_EL/debs/cydia_2.1-1_iphoneos-arm.deb"

    el() {
        echo "Downloading Electra Packages file..."
        curl -o "./$ELECTRATMP" "$REPO_EL/Packages" && sleep 1

        touch "./$SILEOTMP"

        awk '/^Package: org.coolstar.sileo$/ {s=NR;next} s && NR<=s+15' "./$ELECTRATMP" &> $SILEOTMP
        SILEOURL=https://electrarepo64.coolstar.org/$(awk -F'Filename:' '{print $2}' $SILEOTMP)
        SILEOURL_CONDENSED="$(echo -e "${SILEOURL}" | tr -d '[:space:]')"
        rm -f "./$SILEOTMP"
        
        echo "Downloading latest version of Sileo..."
        curl --silent -o ./sileo.deb $SILEOURL_CONDENSED

        echo "Installing..."
        dpkg -i ./sileo.deb

        echo "Cleaning up..."
        rm -f "./$ELECTRATMP"
        rm -f ./sileo.deb

        echo "Running uicache"
        uicache
        kill_springboard
        exit 1;
    }
        echo "This will only work for users with Electra11, Electra12, or unc0ver dark."
        read -p "Would you like to continue? [Y/N] " -n 1 -r
        echo    # (optional) move to a new line
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            el
        else
            start_menu
        fi

}
run_diatrus_cydia_patch() {
    check_if_root
    echo "Patching Cydia and Sileo..."
    killall Cydia
    killall Sileo
                ## From Diatrus's Sileo Installer for unc0ver 

                echo '<?xml version="1.0" encoding="UTF-8"?>
                <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
                <plist version="1.0">
                <dict>
                    <key>platform-application</key>
                    <true/>
                    <key>com.apple.private.skip-library-validation</key>
                    <true/>
                    <key>com.apple.private.security.no-container</key>
                    <true/>
                </dict>
                </plist>' >> ./ent.xml
                sed -i 's/sources\.list\.d/sources\.cydiad/g' /Applications/Cydia.app/Cydia
                mkdir -p /etc/apt/sources.cydiad/
                if ! [ -s /etc/apt/sources.cydiad/cydia.list ]; then
                    ln -s /var/mobile/Library/Caches/com.saurik.Cydia/sources.list /etc/apt/sources.cydiad/cydia.list
                fi
                rm -f /private/etc/apt/sources.list.d/cydia.list
                chown 501:501 /Applications/Cydia.app/Cydia
                ldid -S./ent.xml /Applications/Cydia.app/Cydia
                chown 0:0 /Applications/Cydia.app/Cydia

                echo "Patched!" && sleep 2
}
patch_sileo_sources() {
    if [ ! -f $SILEOSOURCELISTCACHE ]; then
        echo $SILEOSOURCELISTCACHE "does not exist. Cannot patch Sileo Sources!"
        pause
        start_menu
    fi
    if [ ! -f $SILEOSOURCELIST ]; then
        echo $SILEOSOURCELIST "does not exist. Cannot patch Sileo Sources!"
        pause
        start_menu
    fi
    if [[ $SILEOSOURCELISTCACHE -nt $SILEOSOURCELIST ]]; then
        echo "$SILEOSOURCELISTCACHE is newer than $SILEOSOURCELIST"
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        echo ls -lh $SILEOSOURCELISTCACHE
        echo "Newer File: $SILEOSOURCELISTCACHE"
        echo ls -lh $SILEOSOURCELIST
        echo "Older File: $SILEOSOURCELIST"
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        read -p "Would you like to update $SILEOSOURCELIST? (Replace newer file with older file) [Y/N] " -n 1 -r
        echo    # (optional) move to a new line
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            cp -fv $SILEOSOURCELISTCACHE $SILEOSOURCELIST
            touch $SILEOSOURCELISTCACHE
            touch $SILEOSOURCELIST
            echo "Done!"
            pause
            start_menu
        fi
    fi
    if [[ $SILEOSOURCELIST -nt $SILEOSOURCELISTCACHE ]]; then
        echo "$SILEOSOURCELIST is newer than $SILEOSOURCELISTCACHE"
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        echo ls -lh $SILEOSOURCELIST
        echo "Newer File: $SILEOSOURCELIST"
        echo ls -lh $SILEOSOURCELISTCACHE
        echo "Older File: $SILEOSOURCELISTCACHE"
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        read -p "Would you like to update $SILEOSOURCELISTCACHE? (Replace newer file with older file) [Y/N] " -n 1 -r
        echo    # (optional) move to a new line
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            cp -fv $SILEOSOURCELIST $SILEOSOURCELISTCACHE
            touch $SILEOSOURCELISTCACHE
            touch $SILEOSOURCELIST
            echo "Done!"
            pause
            start_menu
        fi
    fi
    pause
    start_menu
}
remove_lists_sources() {
    echo ""
    echo ""
    echo ""
    echo -e "This is a dangerous procedure. You ${RED}will lose all Cydia & Sileo sources/lists${STD} after executing this."
    read -p "Are you sure you want to continue? [Y/N] " -n 1 -r
                        echo    # (optional) move to a new line
                        if [[ $REPLY =~ ^[Yy]$ ]]; then
                            read -p "Are you REALLY sure you want to continue? [Y/N] " -n 1 -r
                                echo    # (optional) move to a new line
                                if [[ $REPLY =~ ^[Yy]$ ]]; then
                                    echo -e "Type '${RED}leavemealone${STD}' (ofc w/ out the quotes) and press enter to proceed:"
                                        read msg

                                        if [ $msg = "leavemealone" ]; then
                                            killall Cydia
                                            killall Sileo
                                            echo -e "${RED}Deleting target sources..."
                                            rm -rf $CYDIASOURCES
                                            echo -e "${RED}Deleting Cydia cache..."
                                            rm -rf $CYDIASOURCESCACHE
                                            rm -rf $MORECYDIACACHE
                                            echo -e "${RED}Deleting Cydia lists..."
                                            rm -rf $CYDIALISTS
                                            echo -e "${RED}Deleting Cydia lists.bak ..."
                                            rm -rf "${CYDIALISTS}.bak"
                                            echo -e "${RED}Deleting Cydia Preferences..."
                                            rm -rf $CYDIAPREFS
                                            echo -e "${RED}Deleting Sileo sources..."
                                            rm -rf $SOURCELISTS
                                            echo -e "${RED}Deleting contents of apt directory... (excluding the lock file)"
                                            find $APTDIR -type f -not -name $LOCKFILE
                                            echo -e "${RED}Finished Purging Cydia Lists and Sources!${STD}"
                                        else
                                            echo "You didn't type 'leavemealone' correctly..."
                                            pause
                                            start_menu
                                        fi
                                else
                                    start_menu
                                fi
                        else
                            start_menu
                        fi
}
delete_all_source_backups(){
    check_if_root
    if [ ! -w $ROOT ]; then
	# Root directory is not writeable
        echo -e "${RED}Cannot write to root directory. Try running as root?${STD}"
        pause
        start_menu
    fi
    if [ ! -d $SOURCEUTILITYDIR ]; then
	# Root directory is not writeable
        echo -e "${RED}${SOURCEUTILITYDIR} doesn't exist.${STD}"
        pause
        start_menu
    fi
    read -p "You are about to delete ${RED}all${STD} of your source backups. Are you sure you want to ${RED}continue${STD}? [Y/N] " -n 1 -r
                    echo    # (optional) move to a new line
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                    cd $SOURCEUTILITYDIR
                        rm -fv source*.zip
                        if [ -d $SOURCEBACKUPDIR ]; then
                            rm -rfv $SOURCEBACKUPDIR
                        fi
                        if [ -d "$SOURCEUTILITYDIR/sourceutility" ]; then
                            rm -rfv "$SOURCEUTILITYDIR/sourceutility"
                        fi
                        if [ -d "$SOURCEUTILITYDIR/backupsources" ]; then
                            rm -rfv "$SOURCEUTILITYDIR/backsources"
                        fi

                        echo "Finished deleting all source backups!"
                        pause
                        start_menu
                    else
                    start_menu
                    fi
    
}
delete_cydia_source_backups() {
    check_if_root
    if [ ! -w $SOURCEUTILITYDIR ]; then
	# Root directory is not writeable
        echo -e "${RED}Cannot write to ${SOURCEUTILITYDIR}. Try running as root?${STD}"
        pause
        start_menu
    fi
    read -p "You are about to delete ${RED}all${STD} of your Cydia Source backups. Are you sure you want to ${RED}continue${STD}? [Y/N] " -n 1 -r
        echo    # (optional) move to a new line
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            cd $SOURCEUTILITYDIR
            rm -fv source_cydia*.zip
                if [ -d $SOURCEBACKUPDIR ]; then
                    rm -rfv $SOURCEBACKUPDIR
                fi
                if [ -d "$SOURCEUTILITYDIR/sourceutility" ]; then
                    rm -rfv "$SOURCEUTILITYDIR/sourceutility"
                fi
                if [ -d "$SOURCEUTILITYDIR/backupsources" ]; then
                    rm -rfv "$SOURCEUTILITYDIR/backsources"
                fi
                echo "Finished deleting Cydia Source backups!"
                pause
                start_menu
        else
        start_menu
        fi
}
delete_sileo_source_backups() {
    check_if_root
    if [ ! -w $SOURCEUTILITYDIR ]; then
	# Root directory is not writeable
        echo -e "${RED}Cannot write to ${SOURCEUTILITYDIR}. Try running as root?${STD}"
        pause
        start_menu
    fi
    read -p "You are about to delete ${RED}all${STD} of your Sileo Source backups. Are you sure you want to ${RED}continue${STD}? [Y/N] " -n 1 -r
        echo    # (optional) move to a new line
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            cd $SOURCEUTILITYDIR
            rm -fv source_sileo*.zip
                if [ -d $SOURCEBACKUPDIR ]; then
                    rm -rfv $SOURCEBACKUPDIR
                fi
                if [ -d "$SOURCEUTILITYDIR/sourceutility" ]; then
                    rm -rfv "$SOURCEUTILITYDIR/sourceutility"
                fi
                if [ -d "$SOURCEUTILITYDIR/backupsources" ]; then
                    rm -rfv "$SOURCEUTILITYDIR/backsources"
                fi
                echo "Finished deleting Sileo Source backups!"
                pause
                start_menu
        else
        start_menu
        fi
}
backup_all_sources() {
        # sourcebackup by TheHacker
        JB=null
    init



    echo "This option will only work if you have both Cydia and Sileo installed."
    read -p "Do you wish to continue? [Y/N] " -n 1 -r
            echo    # (optional) move to a new line
            if [[ $REPLY =~ ^[Yy]$ ]]; then

                ## Actual backup script
                cont_bas(){
                        echo -e "It is important that you do ${RED}NOT${STD} terminate this script while you are backing up your sources."
                        pause

                        if [ -w $SOURCEFULLBACKUPZIP ]; then
                            echo -e "${RED}Backup from earlier today detected!${STD}"
                            read -p "Would you like to remove this earlier backup? [Y/N] " -n 1 -r
                                echo    # (optional) move to a new line
                                if [[ $REPLY =~ ^[Yy]$ ]]; then
                                rm -rfv $SOURCEFULLBACKUPZIP
                                else
                                echo "The older backup must be removed to continue. Returning to Start Menu..."
                                pause
                                start_menu
                                fi
                        fi
                        echo "Checking read permissions needed for backup..."

                        {

                        if [ ! -r $CYDIAPREFS ]; then
                            echo "Cannot read $CYDIAPREFS. Try running as root?"
                            pause
                            start_menu
                        fi
                        if [ ! -r $CYDIACACHEDIR ]; then
                            echo "Cannot read $CYDIACACHEDIR. Try running as root?"
                            pause
                            start_menu
                        fi
                        if [ ! -r $SOURCELISTS ]; then
                            echo "Cannot read $SOURCELISTS. Try running as root?"
                            pause
                            start_menu
                        fi

                        echo "Read permissions seem to be okay! Continuing with full backup..." && sleep 2
                        echo "Removing old backup directory..."
                        rm -rfv $SOURCEBACKUPDIR
                        ## Creating dirs for backing up files
                        echo "Creating new backup directory"
                        mkdir $SOURCEBACKUPDIR
                        echo "Creating backup directory for Cydia Preferences... (Sources are stored here)"
                        mkdir $CYDIAPREFSBACKUPDIR
                        echo "Creating backup directory for Cydia Cache... (Sources are also stored here)"
                        mkdir $CYDIACACHEBACKUPDIR
                        echo "Creating backup directory for Source Lists... (Sileo also stores its sources here)"
                        mkdir $SOURCELISTSBACKUPDIR
                        if [ -r $SOURCELISTSCYDIAD ]; then
                        echo "Creating backup directory for $SOURCELISTSCYDIAD... (Default Cydia source directory)"
                        mkdir $SOURCELISTSCYDIADBACKUPDIR
                        else
                        echo "Cannot read $SOURCELISTSCYDIAD... Continuing backup without"
                        fi
                        if [ -r $CYDIASOURCESD ]; then
                        echo "Creating backup directory for $CYDIASOURCESD... (Default Cydia source directory)"
                        mkdir $CYDIASOURCESDBACKUPDIR
                        else
                        echo "Cannot read $CYDIASOURCESD... Continuing backup without..."
                        fi

                        echo "Creating backup directory for Sileo Sources Cache..."
                        mkdir $SILEOLISTCACHEBACKUP
                        echo "Successfully created backup directories!" && sleep 2
                        killall Cydia
                        killall Sileo
                        ## Copying files to backup dirs
                        echo "Copying Cydia Preferences to $CYDIAPREFSBACKUPDIR..."
                        cp -rfv $CYDIAPREFS $CYDIAPREFSBACKUPDIR
                        echo "Copying Cydia Cache to $CYDIACACHEBACKUPDIR..."
                        cp -rfv $CYDIASOURCESCACHE $CYDIACACHEBACKUPDIR
                        cp -rfv $CYDIALISTCACHE $CYDIACACHEBACKUPDIR
                        echo "Copying Source Lists to $SOURCELISTSBACKUPDIR..."
                        cp -afv "$SOURCELISTS/." "$SOURCELISTSBACKUPDIR/"
                        if [ -r $SOURCELISTSCYDIAD ]; then
                        echo "Copying 'sources.cydiad' to $SOURCELISTSCYDIADBACKUPDIR"
                        cp -afv "$SOURCELISTSCYDIAD/." "$SOURCELISTSCYDIADBACKUPDIR/"
                        else
                        echo "Cannot read $SOURCELISTSCYDIAD... Continuing backup without"
                        fi
                        if [ -r $CYDIASOURCESD ]; then
                        echo "Copying 'sources.cydiad' to $CYDIASOURCESDBACKUPDIR"
                        cp -afv "$CYDIASOURCESD/." "$CYDIASOURCESDBACKUPDIR/"
                        else
                        echo "Cannot read $CYDIASOURCESD... Continuing backup without"
                        fi
                        echo "Copying Sileo Source List Cache to $SILEOLISTCACHEBACKUP"
                        cp -rfv $SILEOSOURCELISTCACHE $SILEOLISTCACHEBACKUP
                        echo "Successfully copied files to backup directories!" && sleep 2
                        cd $SOURCEUTILITYDIR
                        echo "Adding backup script..."
                        curl -o ./backups/restore.sh $FULLRESTORESCRIPT
                    
                        if [ -f ./backups/restore.sh ]; then
                            touch ./backups/restore.sh
                            chmod a+x ./backups/restore.sh
                        fi
                        echo "Zipping backup files..."
                        zip -r9 $SFBZRELATIVE $SBDRELATIVE
                        cd /
                        echo "Cleaning up..."
                        rm -rfv $SOURCEBACKUPDIR
                        } || {
                            echo -e "${RED}An exception occurred... Try running as root?${STD}"
                        }

                        echo "Finished backing up sources! You can find the archive at " $SOURCEFULLBACKUPZIP
            }
            
            ## Jailbreak Detector

            check_for_cydia() {
                echo "Checking if Cydia is installed..."
                dpkg-query -W -f='${Status}\n' $CYDIABUNDLEID | grep 'install ok' &> /dev/null
                if [ $? == 0 ]; then
                    echo "$CYDIABUNDLEID is installed!"
                else            
                ## If Cydia is not installed, this process will exit to start_menu since it needs both Cydia and Sileo to be installed.
                    echo "$CYDIABUNDLEID is not installed!" && sleep 2
                    echo "If you wish to backup your sources for only Sileo, run the ${GREEN}Backup Sileo Sources${STD} option from the ${GREEN}Backup Menu${STD}."
                    pause
                    start_menu
                fi
            }
            check_for_sileo() {
                echo "Checking if $SILEOBUNDLEID_U0 is installed..."
                dpkg-query -W -f='${Status}\n' $SILEOBUNDLEID_U0 | grep 'install ok' &> /dev/null
                if [ $? == 0 ]; then
                ## org.juulstar.sileo is the bundle id for Sileo for unc0ver by Diatrus
                JB="u0"
                else
                    echo "Checking if $SILEOBUNDLEID_EL is installed..."
                    dpkg-query -W -f='${Status}\n' $SILEOBUNDLEID_EL | grep 'install ok' &> /dev/null
                        if [ $? == 0 ]; then
                        ## org.coolstar.sileo is the bundle id for Sileo on Electra
                        JB="el"
                        else            
                        ## Both org.juulstar.sileo and org.coolstar.sileo could not be found. Therefore, Sileo is not installed.
                        JB="null"
                        fi
                fi
            }
            check_for_cydia
            check_for_sileo
            echo $JB

            
            if [ $JB == "null" ]; then
                echo "An error occurred while trying to query installed packages!"
                pause
                start_menu
            fi
            if [ $JB == "u0" ]; then
                echo "Unc0ver Detected"
                cont_bas
            fi
            if [ $JB == "el" ]; then
                echo "Electra Detected"
                cont_bas
            fi

            else
                pause
                start_menu
            fi


        pause
        start_menu
}
backup_cydia_sources() {
    echo "This option will only backup Cydia Sources."
    read -p "Do you wish to continue? [Y/N]" -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
        check_if_root
            if [ -w $CYDIASOURCEBACKUPZIP ]; then
                echo -e "${RED}Backup from earlier today detected!${STD}"
                read -p "Would you like to remove this earlier backup? [Y/N] " -n 1 -r
                    echo    # (optional) move to a new line
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                    rm -rfv $CYDIASOURCEBACKUPZIP
                    else
                    echo "The older backup must be removed to continue. Returning to Start Menu..."
                    pause
                    start_menu
                    fi
            fi
            if [ ! -r $CYDIAPREFS ]; then
                echo "Cannot read $CYDIAPREFS. Try running as root?"
                pause
                start_menu
            fi
            if [ ! -r $CYDIACACHEDIR ]; then
                echo "Cannot read $CYDIACACHEDIR. Try running as root?"
                pause
                start_menu
            fi
            echo "Read permissions seem to be okay! Continuing with Cydia backup..." && sleep 2
            echo "Removing old backup directory..."
            rm -rf $SOURCEBACKUPDIR
            ## Creating dirs for backing up files
            echo "Creating new backup directory..."
            mkdir $SOURCEBACKUPDIR
            echo "Creating backup directory for Cydia Preferencess... (Sources are stored here)"
            mkdir $CYDIAPREFSBACKUPDIR
            echo "Creating backup directory for Cydia Cache... (Sources are also stored here for unc0ver)"
            mkdir $CYDIACACHEBACKUPDIR
            
            if [ ! -r $SOURCELISTS ]; then
            killall Cydia
                mkdir $SOURCELISTS
                echo "deb https://www.example.org/ ./" >> "$SOURCELISTS/example.list"
            fi
            echo "Creating backup directory for Source Lists... (Users can put custom sources lists here)"
            mkdir $SOURCELISTSBACKUPDIR
            if [ -r $SOURCELISTSCYDIAD ]; then
            echo "Creating backup directory for $SOURCELISTSCYDIAD... (Default Cydia source directory)"
            mkdir $SOURCELISTSCYDIADBACKUPDIR
            else
            echo "Cannot read $SOURCELISTSCYDIAD... Continuing backup without..."
            fi
            if [ -r $CYDIASOURCESD ]; then
            echo "Creating backup directory for $CYDIASOURCESD... (Default Cydia source directory)"
            mkdir $CYDIASOURCESDBACKUPDIR
            else
            echo "Cannot read $CYDIASOURCESD... Continuing backup without..."
            fi
            
            echo "Successfully created backup directories!" && sleep 2
            killall Cydia
            killall Sileo
            ## Copying files to backup dirs
            echo "Copying Cydia Preferences to $CYDIAPREFSBACKUPDIR..."
            cp -rfv $CYDIAPREFS $CYDIAPREFSBACKUPDIR
            echo "Copying Cydia Cache to $CYDIACACHEBACKUPDIR..."
            cp -rfv $CYDIASOURCESCACHE $CYDIACACHEBACKUPDIR
            cp -rfv $CYDIALISTCACHE $CYDIACACHEBACKUPDIR
            echo "Copying Source Lists to $SOURCELISTSBACKUPDIR..."
            rsync -aP --exclude=$SILEOSOURCENAME "$SOURCELISTS/" $SOURCELISTSBACKUPDIR
            if [ -r $SOURCELISTSCYDIAD ]; then
            echo "Copying 'sources.cydiad' to $SOURCELISTSCYDIADBACKUPDIR"
            rsync -aP --exclude=$SILEOSOURCENAME "$SOURCELISTSCYDIAD/" $SOURCELISTSCYDIADBACKUPDIR
            else
            echo "Cannot read $SOURCELISTSCYDIAD... Continuing backup without"
            fi
            if [ -r $CYDIASOURCESD ]; then
            echo "Copying 'cydiasources.d' to $CYDIASOURCESDBACKUPDIR"
            rsync -aP --exclude=$SILEOSOURCENAME "$CYDIASOURCESD/" $CYDIASOURCESDBACKUPDIR
            else
            echo "Cannot read $CYDIASOURCESD... Continuing backup without"
            fi
            echo "Successfully copied all files to backup directories!" && sleep 2
            cd $SOURCEUTILITYDIR
            curl -o ./backups/restore.sh $CYDIARESTORESCRIPT
                    
                    if [ -f ./backups/restore.sh ]; then
                        touch ./backups/restore.sh
                        chmod a+x ./backups/restore.sh
                    fi

            echo "Zipping backup files..."
            zip -r9 $CSBZRELATIVE $SBDRELATIVE
            cd /
            echo "Cleaning up..."
            rm -rfv $SOURCEBACKUPDIR
            echo "Finished backing up Cydia sources! You can find the archive at " $CYDIASOURCEBACKUPZIP
        fi
        pause
        start_menu
}
backup_sileo_sources() {
    echo "This option will only backup Sileo Sources."
    read -p "Do you wish to continue? [Y/N]" -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            check_if_root

            if [ -w $SILEOSOURCEBACKUPZIP ]; then
                            echo -e "${RED}Backup from earlier today detected!${STD}"
                            read -p "Would you like to remove this earlier backup? [Y/N] " -n 1 -r
                                echo    # (optional) move to a new line
                                if [[ $REPLY =~ ^[Yy]$ ]]; then
                                rm -rfv $SILEOSOURCEBACKUPZIP
                                else
                                echo "The older backup must be removed to continue. Returning to Start Menu..."
                                pause
                                start_menu
                                fi
            fi

            dpkg-query -W -f='${Status}\n' 'org.*.sileo' | grep 'install ok' &> /dev/null
                if [ $? == 0 ]; then
                    if [ ! -r $SILEOSOURCELISTCACHE ]; then
                        echo "Could not read $SILEOSOURCELISTCACHE. Backup cannot continue!"
                        pause
                        start_menu
                    fi
                    echo "Read permissions seem to be okay... Continuing Sileo source backup..."
                    rm -rfv $SOURCEBACKUPDIR
                    ## Creating dirs for backing up files
                    echo "Creating new backup directory..."
                    mkdir $SOURCEBACKUPDIR
                    if [ -r $SILEOSOURCELIST ]; then
                    echo "Creating backup directory for Sileo Sources..."
                    mkdir $SOURCELISTSBACKUPDIR
                    else
                        echo "Could not read $SILEOSOURCELIST. Continuing backup without..."
                    fi
                    echo "Creating backup directory for Sileo Sources Cache..."
                    mkdir $SILEOLISTCACHEBACKUP
                    echo "Successfully created backup directories!" && sleep 2
                    killall Cydia
                    killall Sileo
                    ## Copying files to backup dirs
                    if [ -r $SILEOSOURCELIST ]; then
                    echo "Copying $SILEOSOURCELIST to $SOURCELISTSBACKUPDIR..."
                    cp -rfv $SILEOSOURCELIST $SOURCELISTSBACKUPDIR
                    else
                        echo "Could not read $SILEOSOURCELIST. Continuing backup without..."
                    fi
                    echo "Copying $SILEOSOURCELISTCACHE to $SILEOLISTCACHEBACKUP"
                    cp -rfv $SILEOSOURCELISTCACHE $SILEOLISTCACHEBACKUP
                    echo "Successfully copied all files to backup directories!" && sleep 2
                    cd $SOURCEUTILITYDIR
                    echo "Adding restore script to backup"
                    
                    curl -o ./backups/restore.sh $SILEORESTORESCRIPT
                    
                    if [ -f ./backups/restore.sh ]; then
                        touch ./backups/restore.sh
                        chmod a+x ./backups/restore.sh
                    fi
                    
                    
                    echo "Zipping backup files..."
                    zip -r9 $SSBZRELATIVE $SBDRELATIVE
                    cd /
                    echo "Cleaning up..."
                    rm -rfv $SOURCEBACKUPDIR
                    echo "Finished backing up Sileo sources! You can find the archive at" $SILEOSOURCEBACKUPZIP
                    pause
                    start_menu
                else            
                    echo "Could not find Sileo."
                    pause
                    start_menu
                fi
        fi
}
backup_zebra_sources() {
    echo "This option will only backup Zebra Sources."
    read -p "Do you wish to continue? [Y/N]" -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            check_if_root
            if [ -w $ZEBRASOURCEBACKUPZIP ]; then
                            echo -e "${RED}Backup from earlier today detected!${STD}"
                            read -p "Would you like to remove this earlier backup? [Y/N] " -n 1 -r
                                echo    # (optional) move to a new line
                                if [[ $REPLY =~ ^[Yy]$ ]]; then
                                rm -rfv $ZEBRASOURCEBACKUPZIP
                                else
                                echo "The older backup must be removed to continue. Returning to Start Menu..."
                                pause
                                start_menu
                                fi
            fi
            dpkg-query -W -f='${Status}\n' $ZEBRABUNDLEID | grep 'install ok' &> /dev/null
                if ! [ $? == 0 ]; then
                echo "$ZEBRABUNDLEID not detected!"
                read -p "Do you wish to continue? [Y/N]" -n 1 -r
                     echo
                    if ! [[ $REPLY =~ ^[Yy]$ ]]; then
                        start_menu
                    fi
                fi
                if [ ! -r $ZEBRADIR ]; then
                    echo "Could not find $ZEBRADIR !"
                    pause
                    start_menu
                fi
                echo "Read permissions seem to be okay... Continuing with Zebra source backup..."
                rm -rfv $SOURCEBACKUPDIR
                ## Creating backup dirs for backup
                echo "Creating new backup directory..."
                mkdir $SOURCEBACKUPDIR
                echo "Creating backup directory for Zebra Sources..."
                mkdir $ZEBRABACKUPDIR
                echo "Successfully created backup directories!" && sleep 2
                killall Zebra
                ## Copying files to backup dirs
                echo "Copying Zebra Sources to $ZEBRABACKUPDIR"
                cp -afv "$ZEBRADIR/." $ZEBRABACKUPDIR
                cd $SOURCEUTILITYDIR
                echo "Adding restore script to backup"
                curl -o ./backups/restore.sh $ZEBRARESTORESCRIPT
                    
                    if [ -f ./backups/restore.sh ]; then
                        touch ./backups/restore.sh
                        chmod a+x ./backups/restore.sh
                    fi
                echo "Zipping backup files..."
                zip -r9 $ZSBZRELATIVE $SBDRELATIVE
                cd /
                echo "Cleaning up..."
                rm -rfv $SOURCEBACKUPDIR
                echo "Finished backing up Zebra sources! You can find the archive at" $ZEBRASOURCEBACKUPZIP
                pause
                start_menu
        else
        start_menu
        fi
}
restore_all_sources() {
    
    #sourcerestore by TheHacker
        init
        echo "This option will only work if you have both Cydia and Sileo installed."
        read -p "Do you wish to continue? [Y/N] " -n 1 -r
                echo    # (optional) move to a new line
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                check_if_root
    echo -e "It is important that you do ${RED}NOT${STD} terminate this script while you are restoring your backup."
        pause
        restore() {
            cd $SOURCEUTILITYDIR
            ls ./sourcebackup*.zip
            echo "Enter the date of which backup you would like to restore: (Type 'exit' to leave)"
                read backupDate

                BACKUPTOUNZIP="$SOURCEUTILITYDIR/sourcebackup-$backupDate.zip"
                BTURELATIVE="./sourcebackup-$backupDate.zip"

            if [[ "$backupDate" = 'exit' || "$backupDate" = 'leave' || "$backupDate" = "cancel" || "$backupDate" = "stop" ]]; then
            start_menu
            fi

            if [ -w $BTURELATIVE ]; then
                
                echo "Copying Backup to $SOURCEUTILITYTMP for contingency..."
                cp -fv $BTURELATIVE $SOURCEUTILITYTMP
                echo "Unzipping..."
                unzip -o ${BTURELATIVE}
                echo "Unzipped!"
                echo "Checking r/w permissions needed for restore..."
                if [ ! -r $CYDIAPREFS ]; then
                    echo "Cannot read $CYDIAPREFS. Try running as root?"
                    pause
                    start_menu
                fi
                if [ ! -r $CYDIACACHEDIR ]; then
                    echo "Cannot read $CYDIACACHEDIR. Try running as root?"
                    pause
                    start_menu
                fi
                if [ ! -r $SOURCELISTS ]; then
                    echo "Cannot read $SOURCELISTS. Try running as root?"
                    pause
                    start_menu
                fi
                echo "R/W permissions seem to be okay! Continuing with restore..." && sleep 2
                killall Cydia
                killall Sileo
                ## Copying backup files to their respective locations
                echo "Copying Cydia Preferences Backup to $PREFSDIR"
                cp -fv $CYDIAPREFSBACKUP $PREFSDIR
                echo "Removing target Cydia Cache files..."
                rm -rf "$CYDIACACHEDIR/lists"
                rm -rf "$CYDIACACHEDIR/sources.list"
                echo "Copying Cydia Cache Backup to $CYDIACACHEDIR"
                cp -afv "$CYDIACACHEBACKUPDIR/." "$CYDIACACHEDIR/"
                echo "Removing target Source Lists files..."
                rm -rf "$SOURCELISTS"
                if [ ! -d $SOURCELISTS ]; then
                    mkdir $SOURCELISTS
                fi
                echo "Copying Source List Backup to $SOURCELISTS"
                cp -afv "$SOURCELISTSBACKUPDIR/." "$SOURCELISTS/"
                echo "Successfully copied backup files to their respective locations!"
                rm -rfv $SOURCEBACKUPDIR
                read -p "Would you like to delete the old backup $BTURELATIVE? [Y/N] " -n 1 -r
                    echo    # (optional) move to a new line
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                        rm -fv $BTURELATIVE
                    fi
                echo "If the backup did not restore correctly, you can open the zip file in $SOURCEUTILITYTMP"
                pause
                
                echo -e "This utility breaks Cydia.app after a restore for some. ${RED}Reinstalling Cydia${STD} seems to fix this issue. Your tweaks and sources will not be erased."
                    read -p "Would you like to reinstall Cydia? [Y/N] " -n 1 -r
                        echo    # (optional) move to a new line
                        if [[ $REPLY =~ ^[Yy]$ ]]; then
                            reinstall_cydia
                        else
                        echo "You can run ${RED}Reinstall Cydia${STD} from the Patches Menu"
                        pause
                        start_menu
                        fi
                echo -e "After reinstalling Cydia, you may need to run a patch that fixes duplicate sources. This is likely not needed on unc0ver dark or Electra. Your tweaks and sources will not be erased."
                    read -p "Would you like to patch Cydia? [Y/N] " -n 1 -r

                    echo    # (optional) move to a new line
                        if [[ $REPLY =~ ^[Yy]$ ]]; then
                            run_diatrus_cydia_patch
                        else
                        echo -e "You can run ${RED}Patch Cydia${STD} from the Patches Menu"
                        pause
                        start_menu
                        fi
                pause
                kill_springboard
                start_menu

            else 
            echo "Could not read $BTURELATIVE. Does it exist?"
            pause
            start_menu
            fi
        }
        restore
    
	pause
    start_menu

                fi
}
restore_cydia_sources() {
    echo "This option will only restore Cydia Sources."
    read -p "Do you wish to continue? [Y/N]" -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
        check_if_root
        echo "Checking for Cydia installation..."
        dpkg-query -W -f='${Status}\n' "cydia" | grep 'install ok' &> /dev/null
                if [ ! $? == 0 ]; then
                    read -p "Cydia is not installed. Do you still wish to continue? [Y/N]" -n 1 -r
                        echo
                        if ! [[ $REPLY =~ ^[Yy]$ ]]; then
                            start_menu
                        fi
                fi
        echo "Cydia appears to be installed!"

            cd $SOURCEUTILITYDIR
            ls ./source_cydia_backup-*.zip
            echo "Enter the date of which backup you would like to restore: (Type 'exit' to leave.)"
                read backupDate
                BACKUPTOUNZIP="$SOURCEUTILITYDIR/source_cydia_backup-$backupDate.zip"
                BTURELATIVE="./source_cydia_backup-$backupDate.zip"
                if [[ "$backupDate" = 'exit' || "$backupDate" = 'leave' || "$backupDate" = "cancel" || "$backupDate" = "stop" ]]; then
                start_menu
                fi
                if [ -w $BTURELATIVE ]; then
                    echo "Copying Backup to $SOURCEUTILITYTMP for contingency..."
                    cp -fv $BTURELATIVE $SOURCEUTILITYTMP
                    echo "Checking r/w permissions needed for restore..."

                    if [ ! -r $CYDIAPREFS ]; then
                        echo "Cannot read $CYDIAPREFS. Try running as root?"
                        pause
                        start_menu
                    fi
                    if [ ! -r $CYDIACACHEDIR ]; then
                        echo "Cannot read $CYDIACACHEDIR. Try running as root?"
                        pause
                        start_menu
                    fi
                    echo "R/W permissions seem to be okay! Continuing with Cydia restore..." && sleep 2
                    echo "Removing old backup directory..."
                    rm -rf $SOURCEBACKUPDIR
                    ## Creating dirs for backing up files
                    echo "Creating new backup directory..."
                    mkdir $SOURCEBACKUPDIR
                    cd $SOURCEUTILITYDIR
                    echo "Unzipping..."
                    unzip -o $BTURELATIVE
                    killall Cydia
                    killall Sileo
                    ## Copying backup files to their respective locations
                    echo "Copying Cydia Preferences Backup to $PREFSDIR"
                    cp -rfv $CYDIAPREFSBACKUP $PREFSDIR
                    echo "Removing target Cydia Cache files..."
                    rm -rf "$CYDIACACHEDIR/lists"
                    rm -rf "$CYDIACACHEDIR/sources.list"
                    echo "Copying Cydia Cache Backup to $CYDIACACHEDIR"
                    cp -afv "$CYDIACACHEBACKUPDIR/." "$CYDIACACHEDIR/"
                    if [ ! -d $SOURCELISTS ]; then
                        mkdir $SOURCELISTS
                    fi
                    echo "Copying Source List Backup to $SOURCELISTS"
                    cp -afv "$SOURCELISTSBACKUPDIR/." "$SOURCELISTS/"

                    if [ -d $SOURCELISTSCYDIAD ]; then
                        if [ "$(ls -A $SOURCELISTSCYDIADBACKUPDIR)" ]; then
                        ## Not Empty
                        echo "Copying sources.cydiad Backups to $SOURCELISTSCYDIAD"
                        cp -afv "$SOURCELISTSCYDIADBACKUPDIR/." $SOURCELISTSCYDIAD
                        else
                        ## Empty
                        echo "$SOURCELISTSCYDIADBACKUPDIR is either empty or does not exist. Continuing with restore!"
                        fi
                    fi

                    if [ -d $CYDIASOURCESD ]; then
                        if [ "$(ls -A $CYDIASOURCESDBACKUPDIR)" ]; then
                        ## Not Empty
                        echo "Copying sources.cydiad Backups to $CYDIASOURCESD"
                        cp -afv "$CYDIASOURCESDBACKUPDIR/." $CYDIASOURCESD
                        else
                            ## Empty
                            echo "$CYDIASOURCESDBACKUPDIR is either empty or does not exist. Continuing with restore..."
                        fi
                    else
                    echo "$CYDIASOURCESD is either empty or does not exist. Continuing with restore..."
                    fi

                    echo "Finished restoring Cydia Sources!"
                    pause
                    echo "Cleaning up..."
                    rm -rfv $SOURCEBACKUPDIR
                    read -p "Would you like to delete the old backup $BTURELATIVE? [Y/N] " -n 1 -r
                    echo    # (optional) move to a new line
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                        rm -fv $BTURELATIVE
                    fi
                    echo "If the backup did not restore correctly, you can open the zip file in $SOURCEUTILITYTMP"
                    pause
                    echo -e "This utility breaks Cydia.app after a restore for some. ${RED}Reinstalling Cydia${STD} seems to fix this issue. Your tweaks and sources will not be erased."
                    read -p "Would you like to reinstall Cydia? [Y/N] " -n 1 -r
                        echo    # (optional) move to a new line
                        if [[ $REPLY =~ ^[Yy]$ ]]; then
                            reinstall_cydia
                        else
                        echo "You can run ${RED}Reinstall Cydia${STD} from the Patches Menu"
                        pause
                        start_menu
                        fi
                echo -e "After reinstalling Cydia, you may need to run a patch that fixes duplicate sources. This may only be needed if you are using both Sileo and Cydia on unc0ver. Your tweaks and sources will not be erased."
                    read -p "Would you like to patch Cydia? [Y/N] " -n 1 -r

                    echo    # (optional) move to a new line
                        if [[ $REPLY =~ ^[Yy]$ ]]; then
                            run_diatrus_cydia_patch
                        else
                        echo -e "You can run ${RED}Patch Cydia${STD} from the Patches Menu"
                        pause
                        start_menu
                        fi

                else
                    echo "Could not read $BTURELATIVE. Does it exist?"
                    pause
                    start_menu
                fi
        fi
}
restore_sileo_sources() {
    init
    echo "This option will only restore Sileo Sources."
    read -p "Do you wish to continue? [Y/N]" -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            check_if_root
            cd $SOURCEUTILITYDIR
            ls ./source_sileo_backup-*.zip
            echo "Enter the date of which backup you would like to restore: (Type 'exit' to leave.)"
                read backupDate

                BACKUPTOUNZIP="$SOURCEUTILITYDIR/source_sileo_backup-$backupDate.zip"
                BTURELATIVE="./source_sileo_backup-$backupDate.zip"
                if [[ "$backupDate" = 'exit' || "$backupDate" = 'leave' || "$backupDate" = "cancel" || "$backupDate" = "stop" ]]; then
                start_menu
                fi
            if [ -w $BTURELATIVE ]; then
                echo "Copying Backup to $SOURCEUTILITYTMP for contingency..."
                cp -fv $BTURELATIVE $SOURCEUTILITYTMP
                echo "Checking r/w permissions needed for restore..."
                if [ ! -w $SOURCELISTS ]; then
                    echo "Cannot read $SOURCELISTS. Try running as root?"
                    pause
                    start_menu
                fi
                if [ ! -w $CACHEDIR ]; then
                    echo "Cannot read $CACHEDIR . Try running as root?"
                    pause
                    start_menu
                fi
                echo "r/w permissions seem to be okay!"
                echo "Checking for Sileo installation..."
                dpkg-query -W -f='${Status}\n' "org.*.sileo" | grep 'install ok' &> /dev/null
                if [ ! $? == 0 ]; then
                    read -p "Sileo is not installed. Do you still wish to continue? [Y/N]" -n 1 -r
                        echo
                        if ! [[ $REPLY =~ ^[Yy]$ ]]; then
                            start_menu
                        fi
                fi
                echo "Sileo is installed!"
                echo "Removing old backup directory..."
                rm -rfv $SOURCEBACKUPDIR
                echo "Unzipping..."
                unzip -o $BTURELATIVE
                echo "Unzipped!"
                killall Cydia
                killall Sileo
                echo "Copying Sileo Source Cache to $CACHEDIR ..."
                cp -afv "$SILEOLISTCACHEBACKUP/." $CACHEDIR
                echo "Copying Sileo Source List to $SOURCELISTS ..."
                cp -afv "$SOURCELISTSBACKUPDIR/." $SOURCELISTS
                echo "Finished restoring Sileo Sources!"
                pause
                echo "Cleaning up..."
                rm -rfv $SOURCEBACKUPDIR
                read -p "Would you like to delete the old backup $BTURELATIVE? [Y/N] " -n 1 -r
                    echo    # (optional) move to a new line
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                        rm -fv $BTURELATIVE
                    fi
                update_sources
            else
                echo "Could not read $BTURELATIVE. Does it exist?"
                pause
                start_menu
            fi
        fi
}
restore_zebra_sources() {
    echo "This option will only restore Zebra Sources."
    read -p "Do you wish to continue? [Y/N]" -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            check_if_root
            cd $SOURCEUTILITYDIR
            ls ./source_zebra_backup-*.zip
            echo "Enter the date of which backup you would like to restore: (Type 'exit' to leave.)"
                read backupDate
                BACKUPTOUNZIP="$SOURCEUTILITYDIR/source_zebra_backup-$backupDate.zip"
                BTURELATIVE="./source_zebra_backup-$backupDate.zip"
                if [[ "$backupDate" = 'exit' || "$backupDate" = 'leave' || "$backupDate" = "cancel" || "$backupDate" = "stop" ]]; then
                start_menu
                fi
                if [ ! -w $BTURELATIVE ]; then
                    echo "Cannot write to $BTURELATIVE ! Does it exist?"
                    pause
                    start_menu
                fi
                if [ ! -w /private/var/mobile/Documents ]; then
                    echo "Cannot write to /private/var/mobile/Documents ."
                    pause
                    start_menu
                fi
                echo "r/w permissions seem to be okay!"
                echo "Checking for Zebra installation..."
                dpkg-query -W -f='${Status}\n' $ZEBRABUNDLEID | grep 'install ok' &> /dev/null
                if [ ! $? == 0 ]; then
                    read -p "Zebra is not installed. Do you still wish to continue? [Y/N]" -n 1 -r
                        echo
                        if ! [[ $REPLY =~ ^[Yy]$ ]]; then
                            start_menu
                        fi
                fi
                echo "Zebra is installed!"
                echo "Removing old backup directory"
                rm -rfv $SOURCEBACKUPDIR
                echo "Unzipping..."
                unzip -o $BTURELATIVE
                echo "Unzipped!"
                killall Zebra
                echo "Restoring Zebra backup..."
                if [ ! -d $ZEBRADIR ]; then
                    mkdir $ZEBRADIR
                fi
                cp -afv "$ZEBRABACKUPDIR/." $ZEBRADIR
                echo "Finished restoring Zebra sources!" && sleep 2
                echo "Cleaning up..."
                rm -rfv $SOURCEBACKUPDIR
                read -p "Would you like to delete the old backup $BTURELATIVE? [Y/N] " -n 1 -r
                    echo    # (optional) move to a new line
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                        rm -fv $BTURELATIVE
                    fi
        else
        start_menu
        fi
}
copy_cydia_to_sileo() {
    coming_soon
}
copy_sileo_to_cydia() {
    coming_soon
}
purge_ds_store() {
    if [ ! -w $ROOT ]; then
        # Root directory is not writeable
        echo -e "${RED}Cannot write to root directory. Try running as root?${STD}"
        pause
        start_menu
    fi
    echo "Looking for .DS_STORE files to purge..."
    cd /
    find . -name '.DS_Store' -delete
    echo "Finished pruging .DS_STORE files!"
    pause
}
hard_respring() {
    check_if_root
    echo "Do NOT close terminate this script until your iOS Device has resprung."
    echo "Respringing..."
    ldrestart
    exit 0;
}
kill_springboard() {
    check_if_root
    echo "Killing springboard..." && sleep 1
    killall SpringBoard
    exit 0;
}
run_reboot() {
    echo -e "You are about to reboot your iOS Device. If you are runnning anything ${RED}newer than iOS 9.1${STD}, you are likely using an semi-tethered jailbreak. This means that after a reboot, you will ${RED}temporarily lose your jailbreak${STD}."
    read -p "Are you sure you want to continue? [Y/N] " -n 1 -r
        echo    # (optional) move to a new line
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            reboot
        else
        start_menu
        fi
}

# START MENU
show_menus() {
	clear
    echo ""
    echo ""
	echo ""
    echo ""
    echo ""
    echo ""
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"	
	echo " sourceutility ${VER} by TheHacker "
    echo ""
    decide_if_tip
    echo "~~ Start Menu ~~"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo -e "1. ${GREEN}Backup Sources${STD}"
    echo -e "2. ${GREEN}Restore Sources${STD}"
#    echo -e "3. ${GREEN}Sync Sources${STD}"
    echo -e "3. ${RED}Delete Backups${STD}"
    echo -e "4. ${GREEN}Utilities Menu${STD}"
    echo -e "5. ${GREEN}Patches Menu${STD}"
	echo "0. Exit"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
}
read_options(){
	local choice
	read -p "Enter choice [ 0 - 5 ] " choice
	case $choice in
		1) backup_menu ;;
        2) restore_menu ;;
        #3) sync_menu ;;
		3) delete_backups_menu ;;
        4) utilies_menu ;;
        5) patch_menu ;;
        
        0) exit 0;;
		*) echo -e "${RED}Invalid Option...${STD}" && sleep 2
	esac
}
# UTILITIES MENU
show_u_menus() {
	clear
    echo ""
    echo ""
	echo ""
    echo ""
    echo ""
    echo ""
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"	
	echo " sourceutility ${VER} by TheHacker "
    echo ""
    decide_if_tip
    echo "~~ Other Utilities Menu ~~"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo "1. ldrestart"
    echo "2. uicache"
    echo -e "3. ${RED}Reboot${STD}"
    echo "4. Purge .DS_STORE files"
    echo -e "5. ${RED}Purge Cydia & Sileo Lists/Sources${STD}"
    echo "6. apt-get update"
    echo -e "7. ${GREEN}Start Menu${STD}"
    echo -e "8. ${GREEN}Patches Menu${STD}"
    echo "0. Exit"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
}
read_u_options(){
	local choice
	read -p "Enter choice [ 0 - 8 ] " choice
	case $choice in
		1) { 
            hard_respring 
            } || { 
                echo -e "${RED}Could not run ldrestart. Try running as root?${STD}" && sleep 2
                } ;;
        2) { 
            uicache
            } || { 
                echo -e "${RED}Could not run uicache. Try running as root?${STD}" && sleep 2
                } ;;
        3) {
            run_reboot
            } || {
                echo -e "${RED}Could not reboot. Try running as root?${STD}" && sleep 2
            } ;;
        4) purge_ds_store ;;
		5) remove_lists_sources ;;
        6) update_sources ;;
		7) start_menu ;;
        8) patch_menu ;;
        0) exit 0;;
		*) echo -e "${RED}Invalid Option...${STD}" && sleep 2
	esac
}
# PATCHES MENU
show_patch_menu() {
    clear
    echo ""
    echo ""
	echo ""
    echo ""
    echo ""
    echo ""
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"	
	echo " sourceutility ${VER} by TheHacker "
    echo ""
    decide_if_tip
    echo "~~ Patches Menu ~~"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo "1. Patch Cydia"
    echo "2. Patch Sileo Sources"
    echo "3. Reinstall Cydia"
    echo "4. Reinstall Sileo"
    echo "5. Kill Springboard"
    echo -e "6. ${GREEN}Start Menu${STD}"
    echo -e "7. ${GREEN}Utilities Menu${STD}"
    echo "0. Exit"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
}
read_patch_options() {
    local choice
	read -p "Enter choice [ 0 - 7 ] " choice
	case $choice in
		1) run_diatrus_cydia_patch ;;
        2) patch_sileo_sources ;;
        3) reinstall_cydia ;;
        4) reinstall_sileo ;;
        5) kill_springboard ;;
        6) start_menu ;;
        7) utilies_menu ;;
        0) exit 0;;
		*) echo -e "${RED}Invalid Option...${STD}" && sleep 2
	esac
}
# BACKUP MENU
show_backup_menu() {
    clear
    echo ""
    echo ""
	echo ""
    echo ""
    echo ""
    echo ""
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"	
	echo " sourceutility ${VER} by TheHacker "
    echo ""
    decide_if_tip
    echo "~~ Backup Menu ~~"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo "1. Backup both Cydia & Sileo Sources"
    echo "2. Backup Cydia Sources"
    echo "3. Backup Sileo Sources"
    echo "4. Backup Zebra Sources"
    echo -e "5. ${GREEN}Start Menu${STD}"
    echo -e "6. ${GREEN}Utilities Menu${STD}"
    echo -e "7. ${GREEN}Patches Menu${STD}"
    echo "0. Exit"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
}
read_backup_options() {
    local choice
	read -p "Enter choice [ 0 - 7 ] " choice
	case $choice in
		1) backup_all_sources ;;
        2) backup_cydia_sources ;;
        3) backup_sileo_sources ;;
        4) backup_zebra_sources ;;
        5) start_menu ;;
        6) utilies_menu ;;
        7) patch_menu ;;
        0) exit 0;;
		*) echo -e "${RED}Invalid Option...${STD}" && sleep 2
	esac
}
# RESTORE MENU
show_restore_menu() {
    clear
    echo ""
    echo ""
	echo ""
    echo ""
    echo ""
    echo ""
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"	
	echo " sourceutility ${VER} by TheHacker "
    echo ""
    decide_if_tip
    echo "~~ Restore Menu ~~"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo "1. Restore both Cydia & Sileo Sources"
    echo "2. Restore Cydia Sources"
    echo "3. Restore Sileo Sources"
    echo "4. Restore Zebra Sources"
    echo -e "5. ${GREEN}Start Menu${STD}"
    echo -e "6. ${GREEN}Utilities Menu${STD}"
    echo -e "7. ${GREEN}Patches Menu${STD}"
    echo "0. Exit"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
}
read_restore_options() {
    local choice
	read -p "Enter choice [ 0 - 7 ] " choice
	case $choice in
		1) restore_all_sources ;;
        2) restore_cydia_sources ;;
        3) restore_sileo_sources ;;
        4) restore_zebra_sources ;;
        5) start_menu ;;
        6) utilies_menu ;;
        7) patch_menu ;;
        0) exit 0;;
		*) echo -e "${RED}Invalid Option...${STD}" && sleep 2
	esac
}
# DELETE MENU
show_delete_menu() {
    clear
    echo ""
    echo ""
	echo ""
    echo ""
    echo ""
    echo ""
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"	
	echo " sourceutility ${VER} by TheHacker "
    echo ""
    decide_if_tip
    echo "~~ Delete Backups Menu ~~"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo -e "1. ${RED}Delete All Backups${STD}"
    echo -e "2. ${RED}Delete Cydia Source Backups${STD}"
    echo -e "3. ${RED}Delete Sileo Source Backups${STD}"
    echo -e "4. ${RED}Delete Zebra Source Backups${STD}"
    echo -e "5. ${GREEN}Start Menu${STD}"
    echo -e "6. ${GREEN}Utilities Menu${STD}"
    echo -e "7. ${GREEN}Patches Menu${STD}"
    echo "0. Exit"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
}
read_delete_options() {
    local choice
	read -p "Enter choice [ 0 - 7 ] " choice
	case $choice in
		1) delete_all_source_backups ;;
        2) delete_cydia_source_backups ;;
        3) delete_sileo_source_backups ;;
        4) delete_zebra_source_backups ;;
        5) start_menu ;;
        6) utilies_menu ;;
        7) patch_menu ;;
        0) exit 0;;
		*) echo -e "${RED}Invalid Option...${STD}" && sleep 2
	esac
}
# SYNC MENU
show_sync_menu() {
    clear
    echo ""
    echo ""
	echo ""
    echo ""
    echo ""
    echo ""
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"	
	echo " sourceutility ${VER} by TheHacker "
    echo ""
    decide_if_tip
    echo "~~ Sync Sources Menu ~~"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo -e "1. Sync sources between Cydia and Zebra"
    echo -e "2. ${GREEN}Start Menu${STD}"
    echo -e "3. ${GREEN}Utilities Menu${STD}"
    echo -e "4. ${GREEN}Patches Menu${STD}"
    echo "0. Exit"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
}
read_sync_options() {
    local choice
	read -p "Enter choice [ 0 - 4 ] " choice
	case $choice in
        1) sync_cydia_zebra ;;
        2) start_menu ;;
        3) utilies_menu ;;
        4) patch_menu ;;
        0) exit 0;;
		*) echo -e "${RED}Invalid Option...${STD}" && sleep 2
	esac
}
# ----------------------------------------------
# Step #3: Trap CTRL+C, CTRL+Z and quit singles
# ----------------------------------------------
trap '' SIGINT SIGQUIT SIGTSTP
 
# -----------------------------------
# Step #4: Main logic - infinite loop
# ------------------------------------

start_menu() {
    cd /
    show_menus
	read_options
}
utilies_menu() {
    cd /
    show_u_menus
    read_u_options
}
patch_menu() {
    cd /
    show_patch_menu
    read_patch_options
}
backup_menu() {
    cd /
    show_backup_menu
    read_backup_options
}
restore_menu() {
    cd /
    show_restore_menu
    read_restore_options
}
delete_backups_menu() {
    cd /
    show_delete_menu
    read_delete_options
}
#sync_menu() {
#    cd /
#    show_sync_menu
#    read_sync_options
#}
while true
do
#    if [[ $@ == "--help" || $@ == "-h" ]]; then
#        echo "Help argument detected."
#        exit 0;
#    fi
#    if [ $@ -eq "0" ]; then
     start_menu
#     exit 0;
#    fi
#    echo "Arguemt '$@' does not exist"
done