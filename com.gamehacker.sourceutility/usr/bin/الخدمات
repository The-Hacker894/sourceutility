#!/bin/sh 

clear
VER="1.0"
echo "gamehacker080 v$VER"

## ----------------------------------
# Step #1: Define variables
# ----------------------------------
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[1;33m'
STD='\033[0;0;39m'
ROOT="/"

CACHEDIR="/private/var/mobile/Library/Caches/"

gamehacker080DIR="/gamehacker080"
gamehacker080TMP="/gamehacker080/tmp"

SOURCEBACKUPDIR="$gamehacker080DIR/backups"
SBDRELATIVE="./backups"

SOURCELISTS="/private/etc/apt/sources.list.d" # Will need to copy everything from this directory to complete backup
SOURCELISTSBACKUPDIR="$SOURCEBACKUPDIR/sourcelists"
SOURCELISTSCYDIAD="/private/etc/apt/sources.cydiad" 
SOURCELISTSCYDIADBACKUPDIR="$SOURCEBACKUPDIR/cydiad"

CYDIASOURCESD="/private/etc/apt/cydiasources.d"
CYDIASOURCESDBACKUPDIR="$CYDIASOURCESD/cydiasourcesd"

SILEOSOURCENAME="sileo.sources"
SILEOSOURCELISTCACHE="$CACHEDIR/$SILEOSOURCENAME"
SILEOSOURCELIST="/private/etc/apt/sources.list.d/$SILEOSOURCENAME"

SILEOLISTCACHEBACKUP="$SOURCEBACKUPDIR/sileocache"

CYDIAPREFNAME="com.saurik.Cydia.plist"
PREFSDIR="/private/var/mobile/Library/Preferences"
CYDIAPREFS="$PREFSDIR/$CYDIAPREFNAME"
CYDIAPREFSBACKUPDIR="$SOURCEBACKUPDIR/cydiaprefs"
CYDIAPREFSBACKUP="$CYDIAPREFSBACKUPDIR/$CYDIAPREFNAME"

CYDIACACHEDIR="/private/var/mobile/Library/Caches/com.saurik.Cydia"
CYDIASOURCESCACHE="$CYDIACACHEDIR/sources.list"
CYDIALISTCACHE="$CYDIACACHEDIR/lists"
CYDIACACHEBACKUPDIR="$SOURCEBACKUPDIR/cache"

APTDIR="/private/var/lib/apt"
APTLISTS="/private/var/lib/apt/lists"
LOCKFILE="/private/var/lib/apt/lock"

DATE=$(date +%m-%d-%Y)
SOURCEFULLBACKUPZIP="$gamehacker080DIR/sourcebackup-$DATE.zip"
SFBZRELATIVE="./sourcebackup-$DATE.zip"

CYDIASOURCEBACKUPZIP="$gamehacker080DIR/source_cydia_backup-$DATE.zip"
CSBZRELATIVE="./source_cydia_backup-$DATE.zip"

SILEOSOURCEBACKUPZIP="$gamehacker080DIR/source_sileo_backup-$DATE.zip"
SSBZRELATIVE="./source_sileo_backup-$DATE.zip"

ZEBRASOURCEBACKUPZIP="$gamehacker080DIR/source_zebra_backup-$DATE.zip"
ZSBZRELATIVE="./source_zebra_backup-$DATE.zip"

SYNCADDDIR="$gamehacker080DIR/sync"
CUSTOMLISTNAME="gamehacker080.list"
CUSTOMLIST="$SOURCELISTS/$CUSTOMLISTNAME"

SILEOBUNDLEID="org.coolstar.sileo"
CYDIABUNDLEID="cydia"
ZEBRABUNDLEID="xyz.willy.zebra"

ELECTRATMP="./elpckg"
U0TMP="./elupckg"
CYDIATMP="./cydpckg"
U0DARKTMP="./u0drkpckg"
CHIMERATMP="./chimerapckg"
SILEOTMP="./sillyopckg"

GITHUBRAW="https://github.com/Gamehacker080/gamehacker080"
SILEORESTORESCRIPT="$GITHUBRAW/restore_sileo.sh"
CYDIARESTORESCRIPT="$GITHUBRAW/restore_cydia.sh"
ZEBRARESTORESCRIPT="$GITHUBRAW/restore_zebra.sh"
FILELIST="$GITHUBRAW/file.list"

ZEBRADIR="/private/var/mobile/Documents/xyz.willy.Zebra"
ZEBRASOURCES="$ZEBRADIR/sources.list"
ZEBRABACKUPDIR="$SOURCEBACKUPDIR/zebra"

DIAG="$gamehacker080DIR/gamehacker080-diag.log"

REPO_U0="https://apt.bingner.com/"
REPO_EL="https://electrarepo64.coolstar.org/"
REPO_CH="https://repo.chimera.sh/"
REPO_U0_DARK="https://diatr.us/apt/"

# ----------------------------------
# Step #2: User defined function
# ----------------------------------
pause(){ 
    read -p "Press [Enter] to continue..." fackEnterKey 
    }
coming_soon(){ 
    read -p "This feature is coming soon. Press [Enter/Return] to continue" fackEnterKey 
}
diag_test() {
    clear
    touch $DIAG

    if [ $(ls -A /electra) ]; then
        echo "/electra : YES" >> $DIAG
    else
        echo "/electra : NO" >> $DIAG
    fi
    if [ $(ls -A /chimera) ]; then
        echo "/chimera : YES" >> $DIAG
    else
        echo "/chimera : NO" >> $DIAG
    fi
    if [ -f /.installed_unc0ver ]; then
        echo "/.installed_unc0ver : YES" >> $DIAG
    else
        echo "/.installed_unc0ver : NO" >> $DIAG
    fi
    echo "Cydia Installation Check" >> $DIAG
    echo "$(dpkg-query -W -f='${Status}\n' 'cydia')" >> $DIAG || echo "FALSE" >> $DIAG
    echo 
    echo "org.coolstar.sileo Installation Check" >> $DIAG
    echo "$(dpkg-query -W -f='${Status}\n' 'org.coolstar.sileo')" >> $DIAG || echo "FALSE" >> $DIAG
    echo 
    echo "org.juulstar.sileo Installation Check" >> $DIAG
    echo "$(dpkg-query -W -f='${Status}\n' 'org.juulstar.sileo')" >> $DIAG || echo "FALSE" >> $DIAG
    echo 
    echo "xyz.willy.zebra Installation Check" >> $DIAG
    echo "$(dpkg-query -W -f='${Status}\n' 'xyz.willy.zebra')" >> $DIAG || echo "FALSE" >> $DIAG
    if [ -d $ZEBRADIR ]; then
        echo "$ZEBRADIR : YES" >> $DIAG
    else
        echo "$ZEBRADIR : NO" >> $DIAG
    fi
    if [ -d $ZEBRASOURCES ]; then
        echo "$ZEBRASOURCES : YES" >> $DIAG
    else
        echo "$ZEBRASOURCES : NO" >> $DIAG
    fi
    if [ -d $APTDIR ]; then
        echo "$APTDIR : YES" >> $DIAG
    else
        echo "$APTDIR : NO" >> $DIAG
    fi
    if [ -d $CYDIASOURCESD ]; then
        echo "$CYDIASOURCESD : YES" >> $DIAG
    else
        echo "$CYDIASOURCESD : NO" >> $DIAG
    fi
    if [ -d $SOURCELISTSCYDIAD ]; then
        echo "$SOURCELISTSCYDIAD : YES" >> $DIAG
    else
        echo "$SOURCELISTSCYDIAD : NO" >> $DIAG
    fi
    if [ -f $SILEOSOURCELIST ]; then
        echo "$SILEOSOURCELIST : YES" >> $DIAG
    else
        echo "$SILEOSOURCELIST : NO" >> $DIAG
    fi
    if [ -f $SILEOSOURCELISTCACHE ]; then
        echo "$SILEOSOURCELISTCACHE : YES" >> $DIAG
    else
        echo "$SILEOSOURCELISTCACHE : NO" >> $DIAG
    fi
    if [ -d /private/etc/apt/sources.list.d/ ]; then
        echo "/private/etc/apt/sources.list.d/ : YES" >> $DIAG
    else
        echo "/private/etc/apt/sources.list.d/ : NO" >> $DIAG
    fi
    if [ -f $CYDIAPREFS ]; then
        echo "$CYDIAPREFS : YES" >> $DIAG
    else
        echo "$CYDIAPREFS : NO" >> $DIAG
    fi
    echo "$(sw_vers)" >> $DIAG
    echo "Diagnostic Log generated! -> $DIAG"
    exit 0
}
check_for_cydia_deb() {
    if [ ! -f ./cydia.deb ]; then
        echo "Cydia could not be downloaded... You can run ${RED}Reinstall Cydia${STD} from the Patches Menu."
        pause
        start_menu
    fi
}
check_for_sileo_deb() {
    if [ ! -f ./sileo.deb ]; then
        echo "Sileo could not be downloaded... You can run ${RED}Reinstall Sileo${STD} from the Patches Menu."
        pause
        start_menu
    fi
}
check_if_root(){
    if [[ $EUID -ne 0 ]]; then
        echo "Please run this script as root!" 
        exit 1
    fi
}
decide_if_tip() {
    if [ $(( ( RANDOM % 10 )  + 1 )) -gt 7 ]; then
    echo "ملاحظة: الي باللون الاخضر يعني فيه خيارات اذا اخترتهم"
    echo ""
    fi
}
cydia_not_supported() {
    echo "Cydia is no longer supported by the Electra Team. This means that Cydia can't be supported by this tool until a concreate way of installing Cydia arises."
    pause
    start_menu
}
init(){
        check_if_root
    if [ ! -w $ROOT ]; then
	# Root directory is not writeable
        echo -e "${RED}Cannot write to root directory. Try running as root?${STD}"
        pause
        start_menu
    fi

    # If the Source Utility Directory doesn't already exist, create one
    if [ ! -d $gamehacker080DIR ]; then
        mkdir $gamehacker080DIR
        echo "Created gamehacker080 directory!"
    fi

    # If the Source Backup Directory doesn't already exist, create one
    if [ ! -d  $SOURCEBACKUPDIR ]; then
        mkdir $SOURCEBACKUPDIR
        echo "Created backup directory!" 
    fi

    if [ ! -d $gamehacker080TMP ]; then
        mkdir $gamehacker080TMP
        echo "Created temp directory!"
    fi
    
}
update_sources() {
    echo "Updating source lists. This may take a while..." && sleep 2
    apt-get update
}
check_connection() {
        URL=$1
        echo $URL

        ex() {
            echo "Could not connect to $URL..."
            pause
        }
        cont() {
            echo "Connection to $URL returned no errors!"
        }
            echo "Checking ability to connect to '$URL'..."
            
            case "$(curl --insecure -s --max-time 2 -I $URL | sed 's/^[^ ]*  *\([0-9]\).*/\1/; 1q')" in
        [23]) cont ;;
        5) ex ;;
        *) ex;;
            esac
    
}
reinstall_sileo() {
    cd $gamehacker080DIR
    check_if_root
    killall Cydia
    killall Sileo
    echo "Checking for tmp directory..."
    if [ ! -d $gamehacker080TMP ]; then
    echo "Creating tmp directory..."
        mkdir $gamehacker080TMP
    fi
    cd $gamehacker080TMP

    u0_dark() {
        check_connection $REPO_U0_DARK
        echo "Downloading Misceo Packages..."
        curl --insecure -o "./$U0DARKTMP" "$REPO_U0_DARK/Packages" && sleep 1

        touch "./$SILEOTMP"

        awk '/^Package: $SILEOBUNDLEID$/ {s=NR;next} s && NR<=s+15' "./$U0DARKTMP" &> $SILEOTMP
        SILEOURL=$REPO_U0_DARK/$(awk -F'Filename:' '{print $2}' $SILEOTMP)
        SILEOURL_CONDENSED="$(echo -e "${SILEOURL}" | tr -d '[:space:]')"
        rm -f "./$SILEOTMP"
        
        echo "Downloading latest version of Sileo..."
        curl --silent --insecure -o ./sileo.deb $SILEOURL_CONDENSED

        check_for_sileo_deb

        echo "Installing..."
        dpkg -i ./sileo.deb

        echo "Running uicache"
        uicache --all
        echo "Cleaning up..." 
        rm -f ./sileo.deb
        rm -f "./$U0DARKTMP"
        rm -f "./$SILEOTMP"
        cd /
        echo "Completed installation process for Sileo. You may want to run ldrestart after this script has concluded. "
        pause
        start_menu
    }
    chimera() {
        check_connection $REPO_CH
        echo "Downloading Chimera Packages..."
        curl --insecure -o "./$CHIMERATMP" "$REPO_CH/Packages" && sleep 1

        touch "./$SILEOTMP"

        awk '/^Package: $SILEOBUNDLEID$/ {s=NR;next} s && NR<=s+15' "./$CHIMERATMP" &> $SILEOTMP
        SILEOURL=$REPO_CH/$(awk -F'Filename:' '{print $2}' $SILEOTMP)
        SILEOURL_CONDENSED="$(echo -e "${SILEOURL}" | tr -d '[:space:]')"
        rm -f "./$SILEOTMP"
        
        echo "Downloading latest version of Sileo..."
        curl --silent --insecure -o ./sileo.deb $SILEOURL_CONDENSED

        check_for_sileo_deb

        echo "Installing..."
        dpkg -i ./sileo.deb

        echo "Running uicache"
        uicache --all
        echo "Cleaning up..." 
        rm -f ./sileo.deb
        rm -f "./$CHIMERATMP"
        rm -f "./$SILEOTMP"
        cd /
        echo "Completed installation process for Sileo. You may want to run ldrestart after this script has concluded. "
        pause
        start_menu
    }
    el() {
        check_connection $REPO_EL
        echo "Downloading Electra Packages..."
        curl --insecure -o "./$ELECTRATMP" "$REPO_EL/Packages" && sleep 1

        touch "./$SILEOTMP"

        awk '/^Package: $SILEOBUNDLEID$/ {s=NR;next} s && NR<=s+15' "./$ELECTRATMP" &> $SILEOTMP
        SILEOURL=$REPO_EL/$(awk -F'Filename:' '{print $2}' $SILEOTMP)
        SILEOURL_CONDENSED="$(echo -e "${SILEOURL}" | tr -d '[:space:]')"
        rm -f "./$SILEOTMP"
        
        echo "Downloading latest version of Sileo..."
        curl --silent --insecure -o ./sileo.deb $SILEOURL_CONDENSED

        check_for_sileo_deb

        echo "Installing..."
        dpkg -i ./sileo.deb

        echo "Running uicache"
        uicache --all
        echo "Cleaning up..." 
        rm -f ./sileo.deb
        rm -f "./$ELECTRATMP"
        rm -f "./$SILEOTMP"
        cd /
        echo "Completed installation process for Sileo. You may want to run ldrestart after this script has concluded. "
        pause
        start_menu
    }
    which_sileo() {
    clear
    echo "__________________________________________________"
    echo -e "1. diatr.us/apt (Unc0ver Dark)"
    echo -e "2. electrarepo64.coolstar.org (Electra)"
    echo -e "3. repo.chimera.sh (Chimera)"
    echo "0. Exit"
    echo "__________________________________________________"
    }
    read_sileo_options() {
        local choice
        read -p "Where would you like to download Sileo from? [ 0 - 2 ] " choice
        case $choice in
            1) u0_dark ;; 
            2) el ;;
            3) chimera ;;
            0) start_menu;;
            *) echo -e "${RED} الاختيار خاطئ...${STD}" && sleep 2
        esac
    }
    which_sileo
    read_sileo_options
}
reinstall_cydia() {
    
    cd $gamehacker080DIR
    check_if_root
    killall Cydia
    killall Sileo
    echo "Checking for tmp directory..."
    if [ ! -d $gamehacker080TMP ]; then
    echo "Creating tmp directory..."
        mkdir $gamehacker080TMP
    fi
    cd $gamehacker080TMP
    
    u0() {

        if [[ -d /electra || -d /chimera ]]; then
            cydia_not_supported
        fi

        check_connection $REPO_U0
        echo "Downloading Elucubratus Packages..."
        curl --insecure -o "./$U0TMP" "$REPO_U0/Packages" && sleep 1

        touch "./$CYDIATMP"

        awk '/^Package: cydia$/ {s=NR;next} s && NR<=s+15' "./$U0TMP" &> $CYDIATMP
        CYDIAURL=$REPO_U0/$(awk -F'Filename:' '{print $2}' $CYDIATMP)
        CYDIAURL_CONDENSED="$(echo -e "${CYDIAURL}" | tr -d '[:space:]')"
        rm -f "./$CYDIATMP"
        
        echo "Downloading latest version of Cydia..."
        curl --silent --insecure -o ./cydia.deb $CYDIAURL_CONDENSED

        check_for_cydia_deb

        echo "Installing..."
        dpkg -i ./cydia.deb

        echo "Running uicache"
        uicache --all
        echo "Cleaning up..." 
        rm -f ./cydia.deb
        rm -f "./$U0TMP"
        rm -f "./$CYDIATMP"
        cd /
        echo "Completed installation process for Cydia. You may want to run ldrestart after this script has concluded. "
        pause
        start_menu
    }
    u0_dark() {

        if [[ -d /electra || -d /chimera ]]; then
            cydia_not_supported
        fi

        check_connection $REPO_U0_DARK
        echo "Downloading Misceo Packages..."
        curl --insecure -o "./$U0TMP" "$REPO_U0_DARK/Packages" && sleep 1

        touch "./$CYDIATMP"

        awk '/^Package: cydia$/ {s=NR;next} s && NR<=s+15' "./$U0TMP" &> $CYDIATMP
        CYDIAURL=$REPO_U0_DARK/$(awk -F'Filename:' '{print $2}' $CYDIATMP)
        CYDIAURL_CONDENSED="$(echo -e "${CYDIAURL}" | tr -d '[:space:]')"
        rm -f "./$CYDIATMP"
        
        echo "Downloading latest version of Cydia..."
        curl --silent --insecure -o ./cydia.deb $CYDIAURL_CONDENSED

        check_for_cydia_deb

        echo "Installing..."
        dpkg -i ./cydia.deb

        echo "Running uicache"
        uicache --all
        echo "Cleaning up..." 
        rm -f ./cydia.deb
        rm -f "./$U0TMP"
        rm -f "./$CYDIATMP"
        cd /
        echo "Completed installation process for Cydia. You may want to run ldrestart after this script has concluded. "
        pause
        start_menu
    }

    which_cydia() {
    clear
    echo "__________________________________________________"
	echo -e "1. apt.bingner.com (Unc0ver)"
    echo -e "2. diatr.us/apt (Unc0ver Dark)"
    echo "0. Exit"
    echo "__________________________________________________"
    }
    read_cydia_options() {
        local choice
        read -p "Where would you like to download Cydia from? [ 0 - 2 ] " choice
        case $choice in
            1) u0 ;;
            2) u0_dark ;; 
            0) start_menu;;
            *) echo -e "${RED}الاختيار خاطئ...${STD}" && sleep 2
        esac
    }
    which_cydia
    read_cydia_options
}
run_diatrus_cydia_patch() {

    if [[ -d /electra || -d /chimera ]]; then
            cydia_not_supported
    fi

    check_if_root
    echo "Patching Cydia and Sileo..."
    killall Cydia
    killall Sileo
                ## From Diatrus's Sileo Installer for unc0ver 

                echo '<?xml version="1.0" encoding="UTF-8"?>
                <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
                <plist version="1.0">
                <dict>
                    <key>platform-application</key>
                    <true/>
                    <key>com.apple.private.skip-library-validation</key>
                    <true/>
                    <key>com.apple.private.security.no-container</key>
                    <true/>
                </dict>
                </plist>' >> ./ent.xml
                sed -i 's/sources\.list\.d/sources\.cydiad/g' /Applications/Cydia.app/Cydia
                mkdir -p /etc/apt/sources.cydiad/
                if ! [ -s /etc/apt/sources.cydiad/cydia.list ]; then
                    ln -s /var/mobile/Library/Caches/com.saurik.Cydia/sources.list /etc/apt/sources.cydiad/cydia.list
                fi
                rm -f /private/etc/apt/sources.list.d/cydia.list
                chown 501:501 /Applications/Cydia.app/Cydia
                ldid -S./ent.xml /Applications/Cydia.app/Cydia
                chown 0:0 /Applications/Cydia.app/Cydia

                echo "Patched!" && sleep 2
}
fix_source_perms() {
    echo "Fixing Cydia List Perms..."
    chown root:wheel $CYDIAPREFS
    chowm root:wheel $CYDIASOURCESD
    chown root:wheel $SOURCELISTSCYDIAD
    chown root:wheel /Applications/Cydia.app/Cydia
}
patch_sileo_sources() {

    if [[ -d /electra || -d /chimera ]]; then
            echo "It seems you are running the Electra or Chimera jailbreak. This patch is not needed for those jailbreaks."
            pause
            start_menu
    fi

    if [ ! -f $SILEOSOURCELISTCACHE ]; then
        echo $SILEOSOURCELISTCACHE "does not exist. Cannot patch Sileo Sources!"
        pause
        start_menu
    fi
    if [ ! -f $SILEOSOURCELIST ]; then
        echo $SILEOSOURCELIST "does not exist. Cannot patch Sileo Sources!"
        pause
        start_menu
    fi
    if [[ $SILEOSOURCELISTCACHE -nt $SILEOSOURCELIST ]]; then
        echo "$SILEOSOURCELISTCACHE is newer than $SILEOSOURCELIST"
        echo "__________________________________________________~~~~~"
        echo ls -lh $SILEOSOURCELISTCACHE
        echo "Newer File: $SILEOSOURCELISTCACHE"
        echo ls -lh $SILEOSOURCELIST
        echo "Older File: $SILEOSOURCELIST"
        echo "__________________________________________________~~~~~"
        read -p "Would you like to update $SILEOSOURCELIST? (Replace newer file with older file) [Y/N] " -n 1 -r
        echo    # (optional) move to a new line
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            cp -fv $SILEOSOURCELISTCACHE $SILEOSOURCELIST
            touch $SILEOSOURCELISTCACHE
            touch $SILEOSOURCELIST
            echo "Done!"
            pause
            start_menu
        fi
    fi
    if [[ $SILEOSOURCELIST -nt $SILEOSOURCELISTCACHE ]]; then
        echo "$SILEOSOURCELIST is newer than $SILEOSOURCELISTCACHE"
        echo "__________________________________________________~~~~~"
        echo ls -lh $SILEOSOURCELIST
        echo "Newer File: $SILEOSOURCELIST"
        echo ls -lh $SILEOSOURCELISTCACHE
        echo "Older File: $SILEOSOURCELISTCACHE"
        echo "__________________________________________________~~~~~"
        read -p "Would you like to update $SILEOSOURCELISTCACHE? (Replace newer file with older file) [Y/N] " -n 1 -r
        echo    # (optional) move to a new line
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            cp -fv $SILEOSOURCELIST $SILEOSOURCELISTCACHE
            touch $SILEOSOURCELISTCACHE
            touch $SILEOSOURCELIST
            echo "Done!"
            pause
            start_menu
        fi
    fi
    pause
    start_menu
}
update_resources() {
    echo "Preparing..."

    check_connection $FILELIST

    if [ ! -d $gamehacker080DIR ]; then
        mkdir $gamehacker080DIR
    fi
    cd $gamehacker080DIR
    mkdir updatetemp
    cd updatetemp

    curl --insecure --silent -o ./file.list $FILELIST
    if [ ! -r ./file.list ]; then
        echo "file.list did not download correctly..."
        pause
        start_menu
    fi

    mkdir files
    cd files

    echo "Downloading new resources..."

    while read -r line; do
    # Reading each line

    fname=`basename $line`
    echo "Downloading $fname ..."

    curl --insecure --silent -o ./$fname $line
    done < ../file.list

    echo "Installing new sources..."

    rm -rfv /gamehacker080/res/
    mkdir /gamehacker080/res
    cd ..
    cp -afv "files/." "/gamehacker080/res/"

    newver="$(cat /gamehacker080/res/res.ver)"

    echo "Installed v$newver !"

    pause
    echo "Cleaning up..."
    cd $gamehacker080DIR
    rm -rf updatetemp
}
purge_sources() {

    ## Purge Functions

    sileo() {
        read -p "هل تريد حذف سورسات الـ Sileo? [Y/N] " -n 1 -r
        echo    # (optional) move to a new line
        if ! [[ $REPLY =~ ^[Yy]$ ]]; then
            show_purge_options
            read_purge_options
        fi

        echo "Removing Sileo Sources Cache..."
        rm -fv $SILEOSOURCELISTCACHE
        echo "Removing Sileo Sources"
        rm -fv $SILEOSOURCELIST
        echo "Purging APT Lists..."
        rm -rfv $APTLISTS
        echo "Done!"
        pause
        show_purge_options
        read_purge_options
    }
    cydia() {
        read -p "هل تريد حذف سورسات الـ Cydia? [Y/N] " -n 1 -r
        echo    # (optional) move to a new line
        if ! [[ $REPLY =~ ^[Yy]$ ]]; then
            show_purge_options
            read_purge_options
        fi
        echo "Removing Cydia Preferences..."
        rm -fv $CYDIAPREFS
        echo "Purging Cydia Cache..."
        rm -rfv $CYDIACACHEDIR
        echo "Removing Cydia Sources..."
        rm -rfv $CYDIASOURCESD
        rm -rfv $SOURCELISTSCYDIAD
        echo "Purging APT Lists..."
        rm -rfv $APTLISTS
        echo -e "This utility breaks Cydia.app after a purge for some. ${RED}Reinstalling Cydia${STD} seems to fix this issue."
                    read -p "Would you like to Reinstall Cydia? [Y/N] " -n 1 -r
                        echo    # (optional) move to a new line
                        if [[ $REPLY =~ ^[Yy]$ ]]; then
                            reinstall_cydia
                        else
                        echo "You can run ${RED}Reinstall Cydia${STD} from the Patches Menu"
                        pause
                        start_menu
                        fi
        echo -e "After reinstalling Cydia, you may need to run a patch that fixes duplicate sources. This may only be needed if you are using Sileo alongside Cydia. Your tweaks and sources will not be erased."
                    read -p "Would you like to patch Cydia? [Y/N] " -n 1 -r

                    echo    # (optional) move to a new line
                        if [[ $REPLY =~ ^[Yy]$ ]]; then
                            run_diatrus_cydia_patch
                        else
                        echo -e "You can run ${RED}Patch Cydia${STD} from the Patches Menu"
                        pause
                        start_menu
                        fi

        echo "Done!"
        pause
        show_purge_options
        read_purge_options
    }
    zebra() {
        read -p "هل تريد حذف سورسات الـ Zebra? [Y/N] " -n 1 -r
        echo    # (optional) move to a new line
        if ! [[ $REPLY =~ ^[Yy]$ ]]; then
            show_purge_options
            read_purge_options
        fi
        echo "Purging Zebra Directory..."
        rm -rfv $ZEBRADIR
        echo "Zebra doesn't require me to do much. I like when software doesn't scatter its files in a ton of directories. (Looking at you Cydia)"
        echo "Done!"
        pause
        show_purge_options
        read_purge_options
    }
    show_purge_options() {
	clear
    echo ""
    echo ""
	echo ""
    echo ""
    echo ""
    echo ""
    echo "Select what sources you would like to remove."
	echo "__________________________________________________"
	echo -e "1. ${RED}حذف سورسات الـ Sileo${STD}"
    echo -e "2. ${RED}حذف سورسات الـ Cydia${STD}"
    echo -e "3. ${RED}حذف سورسات الـ Zebra${STD}"
    echo -e "4. ${GREEN}القائمة الرئيسية${STD}"
    echo -e "5. ${GREEN}قائمة الخدمات${STD}"
    echo -e "6. ${GREEN}المزيد من الخيارات${STD}"
	echo "0. الخروج"
    echo "__________________________________________________"
    }
    read_purge_options(){
        local choice
        read -p "اختر احد الخيارات [ ٠ - ٦ ] " choice
        case $choice in
            1) sileo ;;
            2) cydia ;;
            3) zebra ;;  
            4) start_menu ;; 
            5) utilies_menu ;; 
            6) patch_menu ;; 
            0) exit 0;;
            *) echo -e "${RED}الاختيار خاطئ...${STD}" && sleep 2
        esac
    }
    show_purge_options
    read_purge_options

}
delete_all_source_backups(){
    check_if_root
    if [ ! -w $ROOT ]; then
	# Root directory is not writeable
        echo -e "${RED}Cannot write to root directory. Try running as root?${STD}"
        pause
        start_menu
    fi
    if [ ! -d $gamehacker080DIR ]; then
	# Root directory is not writeable
        echo -e "${RED}${gamehacker080DIR} doesn't exist.${STD}"
        pause
        start_menu
    fi
    read -p "You are about to delete ${RED}all${STD} of your source backups. Are you sure you want to ${RED}continue${STD}? [Y/N] " -n 1 -r
                    echo    # (optional) move to a new line
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                    cd $gamehacker080DIR
                        rm -fv source*.zip
                        if [ -d $SOURCEBACKUPDIR ]; then
                            rm -rfv $SOURCEBACKUPDIR
                        fi
                        if [ -d "$gamehacker080DIR/gamehacker080" ]; then
                            rm -rfv "$gamehacker080DIR/gamehacker080"
                        fi
                        if [ -d "$gamehacker080DIR/backupsources" ]; then
                            rm -rfv "$gamehacker080DIR/backsources"
                        fi

                        echo "Finished deleting all source backups!"
                        pause
                        start_menu
                    else
                    start_menu
                    fi
    
}
delete_cydia_source_backups() {
    check_if_root
    if [ ! -w $gamehacker080DIR ]; then
	# Root directory is not writeable
        echo -e "${RED}Cannot write to ${gamehacker080DIR}. Try running as root?${STD}"
        pause
        start_menu
    fi
    read -p "You are about to delete ${RED}all${STD} of your Cydia Source backups. Are you sure you want to ${RED}continue${STD}? [Y/N] " -n 1 -r
        echo    # (optional) move to a new line
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            cd $gamehacker080DIR
            rm -fv source_cydia*.zip
                if [ -d $SOURCEBACKUPDIR ]; then
                    rm -rfv $SOURCEBACKUPDIR
                fi
                if [ -d "$gamehacker080DIR/gamehacker080" ]; then
                    rm -rfv "$gamehacker080DIR/gamehacker080"
                fi
                if [ -d "$gamehacker080DIR/backupsources" ]; then
                    rm -rfv "$gamehacker080DIR/backsources"
                fi
                echo "Finished deleting Cydia Source backups!"
                pause
                start_menu
        else
        start_menu
        fi
}
delete_sileo_source_backups() {
    check_if_root
    if [ ! -w $gamehacker080DIR ]; then
	# Root directory is not writeable
        echo -e "${RED}Cannot write to ${gamehacker080DIR}. Try running as root?${STD}"
        pause
        start_menu
    fi
    read -p "You are about to delete ${RED}all${STD} of your Sileo Source backups. Are you sure you want to ${RED}continue${STD}? [Y/N] " -n 1 -r
        echo    # (optional) move to a new line
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            cd $gamehacker080DIR
            rm -fv source_sileo*.zip
                if [ -d $SOURCEBACKUPDIR ]; then
                    rm -rfv $SOURCEBACKUPDIR
                fi
                if [ -d "$gamehacker080DIR/gamehacker080" ]; then
                    rm -rfv "$gamehacker080DIR/gamehacker080"
                fi
                if [ -d "$gamehacker080DIR/backupsources" ]; then
                    rm -rfv "$gamehacker080DIR/backsources"
                fi
                echo "Finished deleting Sileo Source backups!"
                pause
                start_menu
        else
        start_menu
        fi
}
backup_cydia_sources() {

    if [[ -d /electra || -d /chimera ]]; then
            cydia_not_supported
    fi

    echo "هذا الاختيار سينسخ سورسات الـ Cydia فقط هل انت متأكد؟ [Y/N]" -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
        check_if_root
            if [ -w $CYDIASOURCEBACKUPZIP ]; then
                echo -e "${RED}Backup from earlier today detected!${STD}"
                read -p "Would you like to remove this earlier backup? [Y/N] " -n 1 -r
                    echo    # (optional) move to a new line
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                    rm -rfv $CYDIASOURCEBACKUPZIP
                    else
                    echo "The older backup must be removed to continue. Returning to Main Menu..."
                    pause
                    start_menu
                    fi
            fi
            if [ ! -r $CYDIAPREFS ]; then
                echo "Cannot read $CYDIAPREFS. Try running as root?"
                pause
                start_menu
            fi
            if [ ! -r $CYDIACACHEDIR ]; then
                echo "Cannot read $CYDIACACHEDIR. Try running as root?"
                pause
                start_menu
            fi
            echo "Read permissions seem to be okay! Continuing with Cydia backup..."
            echo "Removing old backup directory..."
            rm -rf $SOURCEBACKUPDIR
            ## Creating dirs for backing up files
            echo "Creating new backup directory..."
            mkdir $SOURCEBACKUPDIR
            echo "Creating backup directory for Cydia Preferencess..."
            mkdir $CYDIAPREFSBACKUPDIR
            echo "Creating backup directory for Cydia Cache..."
            mkdir $CYDIACACHEBACKUPDIR
            
            if [ ! -r $SOURCELISTS ]; then
            killall Cydia
                mkdir $SOURCELISTS
                echo "deb https://www.example.org/ ./" >> "$SOURCELISTS/example.list"
            fi
            echo "Creating backup directory for Source Lists..."
            mkdir $SOURCELISTSBACKUPDIR

            killall Cydia
            killall Sileo
            ## Copying files to backup dirs
            echo "Copying Cydia Preferences to $CYDIAPREFSBACKUPDIR..."
            cp -rfv $CYDIAPREFS $CYDIAPREFSBACKUPDIR
            echo "Copying Cydia Cache to $CYDIACACHEBACKUPDIR..."
            cp -rfv $CYDIASOURCESCACHE $CYDIACACHEBACKUPDIR
            cp -rfv $CYDIALISTCACHE $CYDIACACHEBACKUPDIR
            echo "Copying Source Lists to $SOURCELISTSBACKUPDIR..."
            rsync -aP --exclude=$SILEOSOURCENAME "$SOURCELISTS/" $SOURCELISTSBACKUPDIR
            if [ -r $SOURCELISTSCYDIAD ]; then
            echo "Creating backup directory for $SOURCELISTSCYDIAD... (Default Cydia source directory)"
            mkdir $SOURCELISTSCYDIADBACKUPDIR
            echo "Copying 'sources.cydiad' to $SOURCELISTSCYDIADBACKUPDIR"
            rsync -aP --exclude=$SILEOSOURCENAME "$SOURCELISTSCYDIAD/" $SOURCELISTSCYDIADBACKUPDIR
            else
            echo "Cannot read $SOURCELISTSCYDIAD... Continuing backup without"
            fi
            if [ -r $CYDIASOURCESD ]; then
            echo "Creating backup directory for $CYDIASOURCESD... (Default Cydia source directory)"
            mkdir $CYDIASOURCESDBACKUPDIR
            echo "Copying 'cydiasources.d' to $CYDIASOURCESDBACKUPDIR"
            rsync -aP --exclude=$SILEOSOURCENAME "$CYDIASOURCESD/" $CYDIASOURCESDBACKUPDIR
            else
            echo "Cannot read $CYDIASOURCESD... Continuing backup without"
            fi
            echo "Successfully copied all files to backup directories!" && sleep 2
            cd $gamehacker080DIR

            if [ -r /gamehacker080/res/restore_cydia.sh ]; then
                cp -fv /gamehacker080/res/restore_cydia.sh ./backups/
                mv ./backups/restore_cydia.sh ./backups/restore.sh
            else
                curl --insecure -o ./backups/restore.sh $CYDIARESTORESCRIPT
            fi

            curl --insecure -o ./backups/restore.sh 
                
            if [ -f ./backups/restore.sh ]; then
                touch ./backups/restore.sh
                chmod a+x ./backups/restore.sh
            fi


            echo "Zipping backup files..."
            zip -r9 $CSBZRELATIVE $SBDRELATIVE
            cd /
            echo "Cleaning up..."
            rm -rfv $SOURCEBACKUPDIR
            echo "Finished backing up Cydia sources! You can find the archive at " $CYDIASOURCEBACKUPZIP
        fi
        pause
        start_menu
}
backup_sileo_sources() {
    echo "هذا الاختيار سينسخ سورسات الـ Silso فقط."
    read -p "المتابعة؟ [Y/N]" -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            check_if_root

            if [ -w $SILEOSOURCEBACKUPZIP ]; then
                            echo -e "${RED}Backup from earlier today detected!${STD}"
                            read -p "Would you like to remove this earlier backup? [Y/N] " -n 1 -r
                                echo    # (optional) move to a new line
                                if [[ $REPLY =~ ^[Yy]$ ]]; then
                                rm -rfv $SILEOSOURCEBACKUPZIP
                                else
                                echo "The older backup must be removed to continue. Returning to Main Menu..."
                                pause
                                start_menu
                                fi
            fi

            dpkg-query -W -f='${Status}\n' "$SILEOBUNDLEID" | grep 'install ok' &> /dev/null
                if [ $? == 0 ]; then
                    if [[ ! -r $SILEOSOURCELISTCACHE && ! -r $SILEOSOURCELIST ]]; then
                        echo "Could not read $SILEOSOURCELISTCACHE and $SILEOSOURCELIST. Backup cannot continue"
                        pause
                        start_menu
                    fi
                    echo "Read permissions seem to be okay... Continuing Sileo source backup..."
                    rm -rfv $SOURCEBACKUPDIR
                    ## Creating dirs and copying files for back up
                    echo "Creating new backup directory..."
                    mkdir $SOURCEBACKUPDIR
                    ## Backing up Sileo Sources
                    if [ -r $SILEOSOURCELIST ]; then
                    echo "Creating backup directory for Sileo Sources..."
                    mkdir $SOURCELISTSBACKUPDIR
                    echo "Copying $SILEOSOURCELIST to $SOURCELISTSBACKUPDIR..."
                    cp -rfv $SILEOSOURCELIST $SOURCELISTSBACKUPDIR
                    else
                        echo "Could not read $SILEOSOURCELIST. Continuing backup without..."
                    fi
                    ## Backing up Sileo Source List Cache
                    if [ -r $SILEOSOURCELISTCACHE ]; then
                    echo "Creating backup directory for Sileo Sources Cache..."
                    mkdir $SOURCELISTSCACHEBACKUPDIR
                    echo "Copying $SILEOSOURCELISTCACHE to $SILEOLISTCACHEBACKUP"
                    cp -rfv $SILEOSOURCELISTCACHE $SILEOLISTCACHEBACKUP
                    else
                        echo "Could not read $SILEOSOURCELISTCACHE . Continuing backup without..."
                    fi
                    echo "Successfully created backup directories!" && sleep 2
                    killall Cydia
                    killall Sileo
                    
                    echo "Successfully copied all files to backup directories!" && sleep 2
                    cd $gamehacker080DIR
                    echo "Adding restore script to backup"
                    
                    if [ -r /gamehacker080/res/restore_sileo.sh ]; then
                        cp -fv /gamehacker080/res/restore_sileo.sh ./backups/
                        mv ./backups/restore_sileo.sh ./backups/restore.sh
                    else
                        curl --insecure -o ./backups/restore.sh $SILEORESTORESCRIPT
                    fi

                    if [ -f ./backups/restore.sh ]; then
                        touch ./backups/restore.sh
                        chmod a+x ./backups/restore.sh
                    fi
                    
                    
                    echo "Zipping backup files..."
                    zip -r9 $SSBZRELATIVE $SBDRELATIVE
                    cd /
                    echo "Cleaning up..."
                    rm -rfv $SOURCEBACKUPDIR
                    echo "Finished backing up Sileo sources! You can find the archive at" $SILEOSOURCEBACKUPZIP
                    pause
                    start_menu
                else            
                    echo "Could not find Sileo."
                    pause
                    start_menu
                fi
        fi
}
backup_zebra_sources() {
    echo "هذا الاختيار سينسخ سورسات الـ Zebra فقط."
    read -p "المتابعة؟ [Y/N]" -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            check_if_root
            if [ -w $ZEBRASOURCEBACKUPZIP ]; then
                            echo -e "${RED}Backup from earlier today detected!${STD}"
                            read -p "Would you like to remove this earlier backup? [Y/N] " -n 1 -r
                                echo    # (optional) move to a new line
                                if [[ $REPLY =~ ^[Yy]$ ]]; then
                                rm -rfv $ZEBRASOURCEBACKUPZIP
                                else
                                echo "The older backup must be removed to continue. Returning to Main Menu..."
                                pause
                                start_menu
                                fi
            fi
            dpkg-query -W -f='${Status}\n' $ZEBRABUNDLEID | grep 'install ok' &> /dev/null
                if ! [ $? == 0 ]; then
                echo "$ZEBRABUNDLEID not detected!"
                read -p "Do you wish to continue? [Y/N]" -n 1 -r
                     echo
                    if ! [[ $REPLY =~ ^[Yy]$ ]]; then
                        start_menu
                    fi
                fi
                if [ ! -r $ZEBRADIR ]; then
                    echo "Could not find $ZEBRADIR !"
                    pause
                    start_menu
                fi
                echo "Read permissions seem to be okay... Continuing with Zebra source backup..."
                rm -rfv $SOURCEBACKUPDIR
                ## Creating backup dirs for backup
                echo "Creating new backup directory..."
                mkdir $SOURCEBACKUPDIR
                echo "Creating backup directory for Zebra Sources..."
                mkdir $ZEBRABACKUPDIR
                echo "Successfully created backup directories!" && sleep 2
                killall Zebra
                ## Copying files to backup dirs
                echo "Copying Zebra Sources to $ZEBRABACKUPDIR"
                cp -afv "$ZEBRADIR/." $ZEBRABACKUPDIR
                cd $gamehacker080DIR
                echo "Adding restore script to backup"

                if [ -r /gamehacker080/res/restore_zebra.sh ]; then
                    cp -fv /gamehacker080/res/restore_zebra.sh ./backups/
                    mv ./backups/restore_zebra.sh ./backups/restore.sh
                else
                    curl --insecure -o ./backups/restore.sh $ZEBRARESTORESCRIPT
                fi

                curl --insecure -o ./backups/restore.sh 
                    
                if [ -f ./backups/restore.sh ]; then
                    touch ./backups/restore.sh
                    chmod a+x ./backups/restore.sh
                fi

                echo "Zipping backup files..."
                zip -r9 $ZSBZRELATIVE $SBDRELATIVE
                cd /
                echo "Cleaning up..."
                rm -rfv $SOURCEBACKUPDIR
                echo "Finished backing up Zebra sources! You can find the archive at" $ZEBRASOURCEBACKUPZIP
                pause
                start_menu
        else
        start_menu
        fi
}
restore_cydia_sources() {

    if [[ -d /electra || -d /chimera ]]; then
            cydia_not_supported
    fi
    
    echo "هذا الاختيار سيستعيد سورسات الـ Cydia فقط."
    read -p "المتابعة؟ [Y/N]" -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
        check_if_root
        echo "Checking for Cydia installation..."
        dpkg-query -W -f='${Status}\n' "cydia" | grep 'install ok' &> /dev/null
                if [ ! $? == 0 ]; then
                    read -p "الـ Cydia غير مثبت. هل مازلت تريد المتابعة؟ [Y/N]" -n 1 -r
                        echo
                        if ! [[ $REPLY =~ ^[Yy]$ ]]; then
                            start_menu
                        fi
                fi
        echo "Cydia appears to be installed!"

            cd $gamehacker080DIR
            ls ./source_cydia_backup-*.zip
            echo "Enter the date of which backup you would like to restore: (Type 'exit' to leave.)"
                read backupDate
                BACKUPTOUNZIP="$gamehacker080DIR/source_cydia_backup-$backupDate.zip"
                BTURELATIVE="./source_cydia_backup-$backupDate.zip"
                if [[ "$backupDate" = 'exit' || "$backupDate" = 'leave' || "$backupDate" = "cancel" || "$backupDate" = "stop" ]]; then
                start_menu
                fi
                if [ -w $BTURELATIVE ]; then
                    echo "Copying Backup to $gamehacker080TMP for contingency..."
                    cp -fv $BTURELATIVE $gamehacker080TMP
                    echo "Checking r/w permissions needed for restore..."

                    if [ ! -r $CYDIAPREFS ]; then
                        echo "Cannot read $CYDIAPREFS. Try running as root?"
                        pause
                        start_menu
                    fi
                    if [ ! -r $CYDIACACHEDIR ]; then
                        echo "Cannot read $CYDIACACHEDIR. Try running as root?"
                        pause
                        start_menu
                    fi
                    echo "R/W permissions seem to be okay! Continuing with Cydia restore..." && sleep 2
                    echo "Removing old backup directory..."
                    rm -rf $SOURCEBACKUPDIR
                    ## Creating dirs for backing up files
                    echo "Creating new backup directory..."
                    mkdir $SOURCEBACKUPDIR
                    cd $gamehacker080DIR
                    echo "Unzipping..."
                    unzip -o $BTURELATIVE
                    killall Cydia
                    killall Sileo
                    ## Copying backup files to their respective locations
                    echo "Copying Cydia Preferences Backup to $PREFSDIR"
                    cp -rfv $CYDIAPREFSBACKUP $PREFSDIR
                    echo "Removing target Cydia Cache files..."
                    rm -rf "$CYDIACACHEDIR/lists"
                    rm -rf "$CYDIACACHEDIR/sources.list"
                    echo "Copying Cydia Cache Backup to $CYDIACACHEDIR"
                    cp -afv "$CYDIACACHEBACKUPDIR/." "$CYDIACACHEDIR/"
                    if [ ! -d $SOURCELISTS ]; then
                        mkdir $SOURCELISTS
                    fi
                    echo "Copying Source List Backup to $SOURCELISTS"
                    cp -afv "$SOURCELISTSBACKUPDIR/." "$SOURCELISTS/"

                    if [ -d $SOURCELISTSCYDIAD ]; then
                        if [ "$(ls -A $SOURCELISTSCYDIADBACKUPDIR)" ]; then
                        ## Not Empty
                        echo "Copying sources.cydiad Backups to $SOURCELISTSCYDIAD"
                        cp -afv "$SOURCELISTSCYDIADBACKUPDIR/." $SOURCELISTSCYDIAD
                        else
                        ## Empty
                        echo "$SOURCELISTSCYDIADBACKUPDIR is either empty or does not exist. Continuing with restore!"
                        fi
                    fi

                    if [ -d $CYDIASOURCESD ]; then
                        if [ "$(ls -A $CYDIASOURCESDBACKUPDIR)" ]; then
                        ## Not Empty
                        echo "Copying sources.cydiad Backups to $CYDIASOURCESD"
                        cp -afv "$CYDIASOURCESDBACKUPDIR/." $CYDIASOURCESD
                        else
                            ## Empty
                            echo "$CYDIASOURCESDBACKUPDIR is either empty or does not exist. Continuing with restore..."
                        fi
                    else
                    echo "$CYDIASOURCESD is either empty or does not exist. Continuing with restore..."
                    fi

                    echo "Finished restoring Cydia Sources!"
                    pause
                    fix_source_perms
                    echo "Cleaning up..."
                    rm -rfv $SOURCEBACKUPDIR
                    read -p "Would you like to delete the old backup $BTURELATIVE? [Y/N] " -n 1 -r
                    echo    # (optional) move to a new line
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                        rm -fv $BTURELATIVE
                    fi
                    echo "If the backup did not restore correctly, you can open the zip file in $gamehacker080TMP"
                    pause
                    echo -e "This utility breaks Cydia.app after a restore for some. ${RED}Reinstalling Cydia${STD} seems to fix this issue. Your tweaks and sources will not be erased."
                    read -p "Would you like to reinstall Cydia? [Y/N] " -n 1 -r
                        echo    # (optional) move to a new line
                        if [[ $REPLY =~ ^[Yy]$ ]]; then
                            reinstall_cydia
                        else
                        echo "You can run ${RED}Reinstall Cydia${STD} from the Patches Menu"
                        pause
                        start_menu
                        fi
                echo -e "After reinstalling Cydia, you may need to run a patch that fixes duplicate sources. This may only be needed if you are using both Sileo and Cydia on unc0ver or unc0ver dark. Your tweaks and sources will not be erased."
                    read -p "Would you like to patch Cydia? [Y/N] " -n 1 -r

                    echo    # (optional) move to a new line
                        if [[ $REPLY =~ ^[Yy]$ ]]; then
                            run_diatrus_cydia_patch
                        else
                        echo -e "You can run ${RED}Patch Cydia${STD} from the Patches Menu"
                        pause
                        start_menu
                        fi

                else
                    echo "Could not read $BTURELATIVE. Does it exist?"
                    pause
                    start_menu
                fi
        fi
}
restore_sileo_sources() {
    init
    echo "هذا الاختيار سيستعيد سورسات الـ Sileo فقط"
    read -p "المتابعة؟ [Y/N]" -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            check_if_root
            cd $gamehacker080DIR
            ls ./source_sileo_backup-*.zip
            echo "Enter the date of which backup you would like to restore: (Type 'exit' to leave.)"
                read backupDate

                BACKUPTOUNZIP="$gamehacker080DIR/source_sileo_backup-$backupDate.zip"
                BTURELATIVE="./source_sileo_backup-$backupDate.zip"
                if [[ "$backupDate" = 'exit' || "$backupDate" = 'leave' || "$backupDate" = "cancel" || "$backupDate" = "stop" ]]; then
                start_menu
                fi
            if [ -w $BTURELATIVE ]; then
                echo "Copying Backup to $gamehacker080TMP for contingency..."
                cp -fv $BTURELATIVE $gamehacker080TMP
                echo "Checking r/w permissions needed for restore..."
                if [ ! -w $SOURCELISTS ]; then
                    echo "Cannot read $SOURCELISTS. Try running as root?"
                    pause
                    start_menu
                fi
                if [ ! -w $CACHEDIR ]; then
                    echo "Cannot read $CACHEDIR . Try running as root?"
                    pause
                    start_menu
                fi
                echo "r/w permissions seem to be okay!"
                echo "Checking for Sileo installation..."
                dpkg-query -W -f='${Status}\n' "$SILEOBUNDLEID" | grep 'install ok' &> /dev/null
                if [ ! $? == 0 ]; then
                    read -p "Sileo is not installed. Do you still wish to continue? [Y/N]" -n 1 -r
                        echo
                        if ! [[ $REPLY =~ ^[Yy]$ ]]; then
                            start_menu
                        fi
                fi
                echo "Sileo is installed!"
                echo "Removing old backup directory..."
                rm -rfv $SOURCEBACKUPDIR
                echo "Unzipping..."
                unzip -o $BTURELATIVE
                echo "Unzipped!"
                if [[ ! -r $SILEOLISTCACHEBACKUP && ! -r $SILEOLISTBACKUP ]]; then
                    echo "Cannot read backup directories. Backup is most likely corrupted!"
                    pause
                    start_menu
                fi
                killall Cydia
                killall Sileo
                if [ -r $SILEOLISTCACHEBACKUP ]; then
                    echo "Copying Sileo Source Cache to $CACHEDIR ..."
                    cp -afv "$SILEOLISTCACHEBACKUP/." $CACHEDIR
                fi
                if [ -r $SOURCELISTSBACKUPDIR ]; then
                    if [ ! -d $SOURCELISTS ]; then
                        mkdir $SOURCELISTS
                    fi
                    echo "Copying Sileo Source List to $SOURCELISTS ..."
                    cp -afv "$SOURCELISTSBACKUPDIR/." $SOURCELISTS
                fi
                
                echo "Finished restoring Sileo Sources!"
                pause
                echo "Cleaning up..."
                rm -rfv $SOURCEBACKUPDIR
                read -p "Would you like to delete the old backup $BTURELATIVE? [Y/N] " -n 1 -r
                    echo    # (optional) move to a new line
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                        rm -fv $BTURELATIVE
                    fi
                update_sources
            else
                echo "Could not read $BTURELATIVE. Does it exist?"
                pause
                start_menu
            fi
        fi
}
restore_zebra_sources() {
    echo "هذا الاختيار سيستعيد سورسات الـ Zebra فقط."
    read -p "المتابعة؟ [Y/N]" -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            check_if_root
            cd $gamehacker080DIR
            ls ./source_zebra_backup-*.zip
            echo "Enter the date of which backup you would like to restore: (Type 'exit' to leave.)"
                read backupDate
                BACKUPTOUNZIP="$gamehacker080DIR/source_zebra_backup-$backupDate.zip"
                BTURELATIVE="./source_zebra_backup-$backupDate.zip"
                if [[ "$backupDate" = 'exit' || "$backupDate" = 'leave' || "$backupDate" = "cancel" || "$backupDate" = "stop" ]]; then
                start_menu
                fi
                if [ ! -w $BTURELATIVE ]; then
                    echo "Cannot write to $BTURELATIVE ! Does it exist?"
                    pause
                    start_menu
                fi
                if [ ! -w /private/var/mobile/Documents ]; then
                    echo "Cannot write to /private/var/mobile/Documents ."
                    pause
                    start_menu
                fi
                echo "r/w permissions seem to be okay!"
                echo "Checking for Zebra installation..."
                dpkg-query -W -f='${Status}\n' $ZEBRABUNDLEID | grep 'install ok' &> /dev/null
                if [ ! $? == 0 ]; then
                    read -p "Zebra is not installed. Do you still wish to continue? [Y/N]" -n 1 -r
                        echo
                        if ! [[ $REPLY =~ ^[Yy]$ ]]; then
                            start_menu
                        fi
                fi
                echo "Zebra is installed!"
                echo "Removing old backup directory"
                rm -rfv $SOURCEBACKUPDIR
                echo "Unzipping..."
                unzip -o $BTURELATIVE
                echo "Unzipped!"
                killall Zebra
                echo "Restoring Zebra backup..."
                if [ ! -d $ZEBRADIR ]; then
                    mkdir $ZEBRADIR
                fi
                cp -afv "$ZEBRABACKUPDIR/." $ZEBRADIR
                patch_zebra
                echo "Finished restoring Zebra sources!" && sleep 2
                echo "Cleaning up..."
                rm -rfv $SOURCEBACKUPDIR
                read -p "Would you like to delete the old backup $BTURELATIVE? [Y/N] " -n 1 -r
                    echo    # (optional) move to a new line
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                        rm -fv $BTURELATIVE
                    fi
        else
        start_menu
        fi
}
patch_zebra() {
    echo "Patching Zebra Sources..."
    mk_zebra_dir() {
        mkdir $ZEBRADIR
        chown mobile:mobile $ZEBRADIR
    }
    mk_zebra_sources() {
        echo "deb https://skylarmccauley.xyz/ ./" > $ZEBRADIR/sources.list
        chown mobile:mobile $ZEBRADIR/sources.list
    }
    if [ -d $ZEBRADIR ]; then
        chown mobile:mobile $ZEBRADIR
        if [ -d $ZEBRADIR/lists ]; then
            chown mobile:mobile $ZEBRADIR/lists
        fi
        if [ -f $ZEBRADIR/sources.list ]; then
            chown mobile:mobile $ZEBRADIR/sources.list
        else
            mk_zebra_sources
        fi
        if [ -f $ZEBRADIR/zebra.db ]; then
            chown mobile:mobile $ZEBRADIR/zebra.db
        fi
    else
        mk_zebra_dir
        mk_zebra_sources
    fi
}
hard_respring() {
    echo "Respringing..."
    ldrestart
    exit 0;
}
Backup_Tweaks() {
    echo "total=$(dpkg -i| awk '{print $1}'|grep -v gsc|grep -v "^cy+" | wc -l)
for ((i=0; i<total; i++)) do
 ( echo y
 echo $i
  ) | Sourceutility
done
"
 for x in {0..999} # Change 999 to the amount of tweaks Sourceutility lists so it's not just running it 900 times for no reason
do
	echo "redebbing $x"
	(echo "y" && echo "$x") | Sourceutility
done 
    exit 0;
}
run_reboot() {
    reboot
}
reload_icon_cache() {
    # UICACHE OPTIONS
    uicache_menu() {
        clear
        echo ""
        echo ""
        echo ""
        echo ""
        echo ""
        echo ""
        echo "__________________________________________________"	
        echo " TheHacker ${VER} by game_hacker080 "
        echo ""
        decide_if_tip
        echo "~~ UI Cache Menu ~~"
        echo "__________________________________________________"
        echo -e "1. uicache (Non-Electra)"
        echo -e "2. uicache --all (Electra)"
        echo -e "3. uicache --respring (Electra -- Respring After)"
        echo -e "4. ${GREEN}Utilities Menu${STD}"
        echo "0. Exit"
        echo "__________________________________________________"
    }
    which_uicache() {
        local choice
        read -p "اختر احد الخيارات [ ٠ - ٤ ] " choice
        case $choice in
            1) uicache ;;
            2) uicache --all ;;
            3) uicache --respring ;;
            4) patch_menu ;;
            0) exit 0;;
            *) echo -e "${RED}الاختيار خاطئ...${STD}" && sleep 2
        esac
    }
    uicache_menu
    which_uicache
}

# Main Menu
show_menus() {
	clear
    echo ""
    echo ""
	echo ""
    echo ""
    echo ""
    echo ""
	echo "__________________________________________________"	
	echo " TheHacker ${VER} by game_hacker080 "
    echo ""
    decide_if_tip
    echo "~~ Main Menu ~~"
	echo "__________________________________________________"
 echo -e "1. ${GREEN}نسخ احتياطي للسورسات${STD}"
    echo -e "2. ${GREEN}استعادة النسخة الاحتياطي${STD}"
    echo -e "3. ${GREEN}حذف جميع السورسات${STD}"
    echo -e "4. ${RED}حذف النسخ الاحتياطية${STD}"
    echo -e "5. تحديث جميع السورسات"
    echo -e "6. ${GREEN}قائمة الخدمات${STD}"
    echo -e "7. ${GREEN}المزيد من الخيارات${STD}"
	echo "0. خروج"
    echo "__________________________________________________"
}
read_options(){
	local choice
	read -p "اختر احد الخيارات [ ٠ - ٨ ] " choice
	case $choice in
		1) backup_menu ;;
        2) restore_menu ;;
        3) purge_sources ;;
		4) delete_backups_menu ;;
        5) update_resources ;;
        6) utilies_menu ;;
        7) patch_menu ;;
        
        0) exit 0;;
		*) echo -e "${RED}الاختيار خاطئء...${STD}" && sleep 2
	esac
}
# UTILITIES MENU
show_u_menus() {
	clear
    echo ""
    echo ""
	echo ""
    echo ""
    echo ""
    echo ""
	echo "__________________________________________________"	
	echo " TheHacker ${VER} by game_hacker080 "
    echo ""
    decide_if_tip
    echo "~~ قائمة الخدمات ~~"
	echo "__________________________________________________"
	echo "1. ريسبرينغ للجهاز عبر الايدي"
    echo "2. تنظيف الجهاز من ملفات الكاش"
    echo -e "3. ${RED}اعادة تشغيل الجهاز${STD}"
    echo "4. تحديث السورسات"
    echo -e "5. ${GREEN}القائمة الرئيسية${STD}"
    echo -e "6. ${GREEN}المزيد من الخيارات${STD}"
    echo "0. Exit"
    echo "__________________________________________________"
}
read_u_options(){
	local choice
	read -p "اختر احد الخيارات [ ٠ - ٦ ] " choice
	case $choice in
		1) { 
            hard_respring 
            } || { 
                echo -e "${RED}Could not run ldrestart. Try running as root?${STD}" && sleep 2
                } ;;
        2) reload_icon_cache ;;
        3) {
            run_reboot
            } || {
                echo -e "${RED}Could not reboot. Try running as root?${STD}" && sleep 2
            } ;;
        4) update_sources ;;
		5) start_menu ;;
        6) patch_menu ;;
        0) exit 0;;
		*) echo -e "${RED}الاختيار خاطئ...${STD}" && sleep 2
	esac
}
# PATCHES MENU
show_patch_menu() {
    clear
    echo ""
    echo ""
	echo ""
    echo ""
    echo ""
    echo ""
	echo "__________________________________________________"	
	echo " TheHacker ${VER} by game_hacker080 "
    echo ""
    decide_if_tip
    echo "~~ Patches Menu ~~"
	echo "__________________________________________________"
	echo "1. Patch Cydia (Old)"
    echo "2. Patch Sileo Sources (Old)"
    echo "3. Patch Zebra"
    echo "4. اعادة تثبيت الـ Cydia"
    echo "5. اعادة تثبيت الـ Sileo"
    echo "6. تشغيل نسخ الادوات"
    echo -e "7. ${GREEN}القائمة الرئيسية${STD}"
    echo -e "8. ${GREEN}قائمة الخدمات${STD}"
    echo "0. الخروج"
    echo "__________________________________________________"
}
read_patch_options() {
    local choice
	read -p "اختر احد الخيارات [ ٠ - ٨ ] " choice
	case $choice in
		1) run_diatrus_cydia_patch ;;
        2) patch_sileo_sources ;;
        3) patch_zebra ;;
        4) reinstall_cydia ;;
        5) reinstall_sileo ;;
        6) Backup_Tweaks ;;
        7) start_menu ;;
        8) utilies_menu ;;
        0) exit 0;;
		*) echo -e "${RED}الاختيار خاطئ...${STD}" && sleep 2
	esac
}
# BACKUP MENU
show_backup_menu() {
    clear
    echo ""
    echo ""
	echo ""
    echo ""
    echo ""
    echo ""
	echo "__________________________________________________"	
	echo " TheHacker ${VER} by game_hacker080 "
    echo ""
    decide_if_tip
    echo "~~ Backup Menu ~~"
	echo "__________________________________________________"
    echo "1. نسخ احتياطي لسورسات الـCydia"
    echo "2. نسخ احتياطي لسورسات الـ Sileo"
    echo "3. نسخ احتياطي لسورسات الـ Zebra"
    echo -e "4. ${GREEN}القائمة الرئيسية${STD}"
    echo -e "5. ${GREEN}قائمة الخدمات${STD}"
    echo -e "6. ${GREEN}المزيد من الخيارات${STD}"
    echo "0. الخروج"
	    echo "__________________________________________________"
}
read_backup_options() {
    local choice
	read -p "اختر احد الخيارات [ ٠ - ٦ ] " choice
	case $choice in
        1) backup_cydia_sources ;;
        2) backup_sileo_sources ;;
        3) backup_zebra_sources ;;
        4) start_menu ;;
        5) utilies_menu ;;
        6) patch_menu ;;
        0) exit 0;;
		*) echo -e "${RED}الاختيار خاطئ...${STD}" && sleep 2
	esac
}
# RESTORE MENU
show_restore_menu() {
    clear
    echo ""
    echo ""
	echo ""
    echo ""
    echo ""
    echo ""
	echo "__________________________________________________"	
	echo " TheHacker ${VER} by game_hacker080 "
    echo ""
    decide_if_tip
    echo "~~ Restore Menu ~~"
	echo "__________________________________________________"
    echo "1. استعادة سورسات الـ Cydia"
    echo "2. استعادة سورسات ال Sileo"
    echo "3. استعادة سورسات ال Zebra"
    echo -e "4. ${GREEN}القائمة الرئيسية${STD}"
    echo -e "5. ${GREEN}قائمة الخدمات${STD}"
    echo -e "6. ${GREEN}المزيد من الخيارات${STD}"
    echo "0. خروج"
    echo "__________________________________________________"
}
read_restore_options() {
    local choice
	read -p "اختر احد الخيارات [ ٠ - ٦ ] " choice
	case $choice in
        1) restore_cydia_sources ;;
        2) restore_sileo_sources ;;
        3) restore_zebra_sources ;;
        4) start_menu ;;
        5) utilies_menu ;;
        6) patch_menu ;;
        0) exit 0;;
		*) echo -e "${RED}الاختيار خاطئ...${STD}" && sleep 2
	esac
}
# DELETE MENU
show_delete_menu() {
    clear
    echo ""
    echo ""
	echo ""
    echo ""
    echo ""
    echo ""
	echo "__________________________________________________"	
	echo " TheHacker ${VER} by game_hacker080 "
    echo ""
    decide_if_tip
    echo "~~ Delete Backups Menu ~~"
	echo "__________________________________________________"
	echo -e "1. ${RED}حذف جميع النسخ الاحتياطية للسورسات${STD}"
    echo -e "2. ${RED}حذف النسخ الاحتياطية الخاصة بـ Cydia${STD}"
    echo -e "3. ${RED}حذف النسخ الاحتياطية الخاصة بـ Sileo${STD}"
    echo -e "4. ${RED}حذف النسخ الاحتياطية الخاصة بـ Zebra${STD}"
    echo -e "5. ${GREEN}القائمة الرئيسية${STD}"
    echo -e "6. ${GREEN}قائمة الخدمات${STD}"
    echo -e "7. ${GREEN}المزيد من الخيارات${STD}"
    echo "0. الخروج"
    echo "__________________________________________________"
}
read_delete_options() {
    local choice
	read -p "اختر احد الخيارات [ ٠ - ٧ ] " choice
	case $choice in
		1) delete_all_source_backups ;;
        2) delete_cydia_source_backups ;;
        3) delete_sileo_source_backups ;;
        4) delete_zebra_source_backups ;;
        5) start_menu ;;
        6) utilies_menu ;;
        7) patch_menu ;;
        0) exit 0;;
		*) echo -e "${RED}الاختيار خاطئ...${STD}" && sleep 2
	esac
}
# SYNC MENU
# ----------------------------------------------
# Step #3: Trap CTRL+C, CTRL+Z and quit singles
# ----------------------------------------------
#trap '' SIGINT SIGQUIT SIGTSTP
 
# -----------------------------------
# Step #4: Main logic - infinite loop
# ------------------------------------

start_menu() {
    cd /
    show_menus
	read_options
}
utilies_menu() {
    cd /
    show_u_menus
    read_u_options
}
patch_menu() {
    cd /
    show_patch_menu
    read_patch_options
}
backup_menu() {
    cd /
    show_backup_menu
    read_backup_options
}
restore_menu() {
    cd /
    show_restore_menu
    read_restore_options
}
delete_backups_menu() {
    cd /
    show_delete_menu
    read_delete_options
}
while true
do
    if [[ $1 == "-t" || $1 == "--test" ]]; then
        diag_test
    else
        start_menu
    fi
    
done