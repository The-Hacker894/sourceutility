#!/bin/sh 

clear
VER="0.5"
echo "sourceutility v" $VER

## ----------------------------------
# Step #1: Define variables
# ----------------------------------
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[1;33m'
STD='\033[0;0;39m'
ROOT="/"
SOURCEUTILITYDIR="/sourceutility"
SOURCEUTILITYTMP="/sourceutility/tmp"

SOURCEBACKUPDIR="$SOURCEUTILITYDIR/backups"
SBDRELATIVE="./backups"

SOURCELISTS="/etc/apt/sources.list.d" # Will need to copy everything from this directory to complete backup
SOURCELISTSBACKUPDIR="$SOURCEBACKUPDIR/sourcelists"

CYDIAPREFNAME="com.saurik.Cydia.plist"
PREFSDIR="/private/var/mobile/Library/Preferences"
CYDIAPREFS="$PREFSDIR/$CYDIAPREFNAME"
CYDIAPREFSBACKUPDIR="$SOURCEBACKUPDIR/cydiaprefs"
CYDIAPREFSBACKUP="$CYDIAPREFSBACKUPDIR/$CYDIAPREFNAME"

CYDIACACHEDIR="/private/var/mobile/Library/Caches/com.saurik.Cydia"
CYDIASOURCESCACHE="$CYDIACACHEDIR/sources.list"
CYDIALISTCACHE="$CYDIACACHEDIR/lists"
CYDIACACHEBACKUPDIR="$SOURCEBACKUPDIR/cache"

APTDIR="/private/var/lib/apt"
LOCKFILE="/private/var/lib/apt/lock"
MORECYDIACACHE="/private/var/mobile/Containers/Data/Application/DBA6B427-BEBD-4C95-9F75-BF4830276BF3/Library/Caches/com.saurik.Cydia"


DATE=$(date +%m-%d-%Y)
SOURCEBACKUPZIP="$SOURCEUTILITYDIR/sourcebackup-$DATE.zip"
SBZRELATIVE="./sourcebackup-$DATE.zip"

# ----------------------------------
# Step #2: User defined function
# ----------------------------------
pause(){ 
    read -p "Press [Enter] to continue..." fackEnterKey 
    }

coming_soon(){ 
    read -p "This feature is coming soon. Press [Enter/Return] to continue" fackEnterKey 
}
check_if_root(){
    if [[ $EUID -ne 0 ]]; then
        echo "Please run this script as root!" 
        exit 1
    fi
}
kill_sileo(){
    check_if_root
    echo "Killing Sileo..."
    killall Sileo
}
kill_cydia() {
    check_if_root
    echo "Killing Cydia..."
    killall Cydia
}
decide_if_tip() {
    if [ $(( ( RANDOM % 10 )  + 1 )) -gt 7 ]
    then
    echo "Tip: Entries with purple labels have menus behind them!"
    echo ""
    fi
}

init(){
        check_if_root
    if [ ! -w $ROOT ]; then
	# Root directory is not writeable
        echo -e "${RED}Cannot write to root directory. Try running as root?${STD}"
        pause
        start_menu
    fi

    # If the Source Utility Directory doesn't already exist, create one
    if [ ! -d $SOURCEUTILITYDIR ]; then
        mkdir $SOURCEUTILITYDIR
        echo "Created sourceutility directory!"
    fi

    # If the Source Backup Directory doesn't already exist, create one
    if [ ! -d  $SOURCEBACKUPDIR ]; then
        mkdir $SOURCEBACKUPDIR
        echo "Created backup directory!" 
    fi

    if [ ! -d $SOURCEUTILITYTMP ]; then
        mkdir $SOURCEUTILITYTMP
        echo "Created temp directory!"
    fi
    
}

update_sources() {
    echo "Updating source lists. This may take a while..." && sleep 2
    apt-get update
    start_menu
}
reinstall_cydia() {
    
    cd $SOURCEUTILITYDIR
    check_if_root
    kill_cydia
    kill_sileo
    echo "Checking for tmp directory..."
    if [ ! -d $SOURCEUTILITYTMP ]; then
    echo "Creating tmp directory..."
        mkdir $SOURCEUTILITYTMP
    fi
    cd $SOURCEUTILITYTMP
    REPO="https://apt.bingner.com/"
    CYDIADL="$REPO/debs/1443.00/cydia_1.1.32~b12_iphoneos-arm.deb"
    
    cont() {
        echo "Downloading Cydia from $CYDIADL..."
        curl -o ./cydia.deb $CYDIADL
        echo "Attempting to install Cydia..."
        echo "Running dpkg..."
        dpkg -i ./cydia.deb
        echo "Running uicache... (this may take some time)"
        uicache
        echo "Cleaning up..."
        rm -f ./cydia.deb
        cd /
        echo "Completed installation process for Cydia. You may want to run ldrestart after this script has concluded. If Cydia did not install or install correctly, Re-Jailbreak with 'Reinstall Cydia' activated in unc0ver."
        pause
    }
    ex() {
        echo "Can't connect to apt.bingner.com!"
        pause
        start_menu
    }

    echo "Checking ability to connect to 'apt.bingner.com'..."
    case "$(curl -s --max-time 2 -I $REPO | sed 's/^[^ ]*  *\([0-9]\).*/\1/; 1q')" in
  [23]) cont ;;
  5) ex ;;
  *) ex;;
    esac
   

}
run_diatrus_cydia_patch() {
    check_if_root
    echo "Patching Cydia..."
    kill_cydia
    kill_sileo
                ## From Diatrus's Sileo Installer for unc0ver 

                echo '<?xml version="1.0" encoding="UTF-8"?>
                <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
                <plist version="1.0">
                <dict>
                    <key>platform-application</key>
                    <true/>
                    <key>com.apple.private.skip-library-validation</key>
                    <true/>
                    <key>com.apple.private.security.no-container</key>
                    <true/>
                </dict>
                </plist>' >> ./ent.xml
                sed -i 's/sources\.list\.d/sources\.cydiad/g' /Applications/Cydia.app/Cydia
                mkdir -p /etc/apt/sources.cydiad/
                if ! [ -s /etc/apt/sources.cydiad/cydia.list ]; then
                    ln -s /var/mobile/Library/Caches/com.saurik.Cydia/sources.list /etc/apt/sources.cydiad/cydia.list
                fi
                rm -f /private/etc/apt/sources.list.d/cydia.list
                chown 501:501 /Applications/Cydia.app/Cydia
                ldid -S./ent.xml /Applications/Cydia.app/Cydia
                chown 0:0 /Applications/Cydia.app/Cydia
                echo "Patched!" && sleep 2
}
remove_lists_sources() {
    echo ""
    echo ""
    echo ""
    echo -e "This is a dangerous procedure. You ${RED}will lose all Cydia & Sileo sources/lists${STD} after executing this."
    read -p "Are you sure you want to continue? [Y/N] " -n 1 -r
                        echo    # (optional) move to a new line
                        if [[ $REPLY =~ ^[Yy]$ ]]; then
                            read -p "Are you REALLY sure you want to continue? [Y/N] " -n 1 -r
                                echo    # (optional) move to a new line
                                if [[ $REPLY =~ ^[Yy]$ ]]; then
                                    echo -e "Type '${RED}leavemealone${STD}' (ofc w/ out the quotes) and press enter to proceed:"
                                        read msg

                                        if [ $msg = "leavemealone" ]; then
                                            kill_cydia
                                            kill_sileo
                                            echo -e "${RED}Deleting target sources..."
                                            rm -rf $CYDIASOURCES
                                            echo -e "${RED}Deleting Cydia cache..."
                                            rm -rf $CYDIASOURCESCACHE
                                            rm -rf $MORECYDIACACHE
                                            echo -e "${RED}Deleting Cydia lists..."
                                            rm -rf $CYDIALISTS
                                            echo -e "${RED}Deleting Cydia lists.bak ..."
                                            rm -rf "${CYDIALISTS}.bak"
                                            echo -e "${RED}Deleting Cydia Preferences..."
                                            rm -rf $CYDIAPREFS
                                            echo -e "${RED}Deleting Sileo sources..."
                                            rm -rf $SOURCELISTS
                                            echo -e "${RED}Deleting contents of apt directory... (excluding the lock file)"
                                            find $APTDIR -type f -not -name $LOCKFILE
                                            echo -e "${RED}Finished Purging Cydia Lists and Sources!${STD}"
                                        else
                                            echo "You didn't type 'leavemealone' correctly..."
                                            pause
                                            start_menu
                                        fi
                                else
                                    start_menu
                                fi
                        else
                            start_menu
                        fi
}

delete_source_backups(){
    if [ ! -w $ROOT ]; then
	# Root directory is not writeable
        echo -e "${RED}Cannot write to root directory. Try running as root?${STD}"
        pause
        start_menu
    fi
    if [ ! -w $SOURCEUTILITYDIR ]; then
	# Root directory is not writeable
        echo -e "${RED}Cannot write to ${SOURCEUTILITYDIR}. Try running as root?${STD}"
        pause
        start_menu
    fi
    cd $SOURCEUTILITYDIR
    find . -name "*.zip" -type f -delete
    if [ -d $SOURCEBACKUPDIR ]; then
        rm -rfv $SOURCEBACKUPDIR
    fi
    if [ -d "$SOURCEUTILITY/sourceutility" ]; then
        rm -rfv "$SOURCEUTILITY/sourceutility"
    fi
    if [ -d "$SOURCEUTILITY/backupsources" ]; then
        rm -rfv "$SOURCEUTILITY/backsources"
    fi

    echo "Finished deleting source backups!"
    pause
}

backup_sources() {
    # sourcebackup by TheHacker

init

echo -e "It is important that you do ${RED}NOT${STD} terminate this script while you are backing up your sources."
        pause

if [ -w $SOURCEBACKUPZIP ]; then
    echo -e "${RED}Backup from earlier today detected!${STD}"
    read -p "Would you like to remove this earlier backup? [Y/N] " -n 1 -r
        echo    # (optional) move to a new line
        if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rfv $SOURCEBACKUPZIP
        else
        echo "The older backup must be removed to continue. Returning to Start Menu..."
        pause
        start_menu
        fi
fi

echo "Checking read permissions needed for backup..."

{

if [ ! -r $CYDIAPREFS ]; then
    echo "Cannot read $CYDIAPREFS. Try running as root?"
    pause
    start_menu
fi
if [ ! -r $CYDIACACHEDIR ]; then
    echo "Cannot read $CYDIACACHEDIR. Try running as root?"
    pause
    start_menu
fi
if [ ! -r $SOURCELISTS ]; then
    echo "Cannot read $SOURCELISTS. Try running as root?"
    pause
    start_menu
fi

echo "Read permissions seem to be okay! Continuing with backup..." && sleep 2
echo "Removing old backup directory..."
rm -rfv $SOURCEBACKUPDIR
## Creating dirs for backing up files
echo "Creating new backup directory"
mkdir $SOURCEBACKUPDIR
echo "Creating backup directory for Cydia Preferences... (Sources are stored here)"
mkdir $CYDIAPREFSBACKUPDIR
echo "Creating backup directory for Cydia Cache... (Sources are also stored here)"
mkdir $CYDIACACHEBACKUPDIR
echo "Creating backup directory for Source Lists... (Sileo also stores its sources here)"
mkdir $SOURCELISTSBACKUPDIR
echo "Successfully created backup directories!" && sleep 2
killall Cydia
killall Sileo
## Copying files to backup dirs
echo "Copying Cydia Preferences to $CYDIAPREFSBACKUPDIR..."
cp -rfv $CYDIAPREFS $CYDIAPREFSBACKUPDIR
echo "Copying Cydia Cache to $CYDIACACHEBACKUPDIR..."
cp -rfv $CYDIASOURCESCACHE $CYDIACACHEBACKUPDIR
cp -rfv $CYDIALISTCACHE $CYDIACACHEBACKUPDIR
echo "Copying Source Lists to $SOURCELISTSBACKUPDIR..."
cp -afv "$SOURCELISTS/." "$SOURCELISTSBACKUPDIR/"
echo "Successfully copied files to backup directories!" && sleep 2
cd $SOURCEUTILITYDIR
echo "Zipping backup files..."
zip -r9 $SBZRELATIVE $SBDRELATIVE
cd /
echo "Cleaning up..."
rm -rfv $SOURCEBACKUPDIR
} || {
    echo -e "${RED}An exception occurred... Try running as root?${STD}"
}

echo "Finished backing up sources! You can find the archive at " $SOURCEBACKUPZIP
pause
start_menu
}

restore_sources() {
    #sourcerestore by TheHacker
        init
        echo -e "It is important that you do ${RED}NOT${STD} terminate this script while you are restoring your backup."
        pause
        restore() {
            cd $SOURCEUTILITYDIR
            ls ./sourcebackup*.zip
            echo "Enter the date of which backup you would like to restore: (Type 'exit' to leave.)"
                read backupDate

                BACKUPTOUNZIP="$SOURCEUTILITYDIR/sourcebackup-$backupDate.zip"
                BTURELATIVE="./sourcebackup-$backupDate.zip"

            if [[ "$backupDate" = 'exit' || "$backupDate" = 'leave' || "$backupDate" = "cancel" || "$backupDate" = "stop" ]]; then
            start_menu
            fi

            if [ -w $BTURELATIVE ]; then
                
                echo "Copying Backup to $SOURCEUTILITYTMP for contingency..."
                cp -fv $BTURELATIVE $SOURCEUTILITYTMP
                echo "Unzipping..."
                unzip -o ${BTURELATIVE}
                echo "Unzipped!"
                echo "Checking r/w permissions needed for restore..."
                if [ ! -r $CYDIAPREFS ]; then
                    echo "Cannot read $CYDIAPREFS. Try running as root?"
                    pause
                    start_menu
                fi
                if [ ! -r $CYDIACACHEDIR ]; then
                    echo "Cannot read $CYDIACACHEDIR. Try running as root?"
                    pause
                    start_menu
                fi
                if [ ! -r $SOURCELISTS ]; then
                    echo "Cannot read $SOURCELISTS. Try running as root?"
                    pause
                    start_menu
                fi
                echo "R/W permissions seem to be okay! Continuing with restore..." && sleep 2
                kill_cydia
                kill_sileo
                ## Copying backup files to their respective locations
                echo "Copying Cydia Preferences Backup to $PREFSDIR"
                cp -fv $CYDIAPREFSBACKUP $PREFSDIR
                echo "Removing target Cydia Cache files..."
                rm -rf "$CYDIACACHEDIR/lists"
                rm -rf "$CYDIACACHEDIR/sources.list"
                echo "Copying Cydia Cache Backup to $CYDIACACHEDIR"
                cp -afv "$CYDIACACHEBACKUPDIR/." "$CYDIACACHEDIR/"
                echo "Copying Source List Backup to $SOURCELISTS"
                cp -afv "$SOURCELISTSBACKUPDIR/." "$SOURCELISTS/"
                echo "Successfully copied backup files to their respective locations!"
                rm -rfv $SOURCEBACKUPDIR
                read -p "Would you like to delete the $BTURELATIVE? [Y/N] " -n 1 -r
                    echo    # (optional) move to a new line
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                        rm -fv $BTURELATIVE
                    fi
                echo "If the backup did not restore correctly, you can open the zip file in $SOURCEUTILITYTMP"
                pause
                
                echo -e "This utility breaks Cydia.app after a restore for some. ${RED}Reinstalling Cydia${STD} seems to fix this issue. Your tweaks and sources will not be erased."
                    read -p "Would you like to reinstall Cydia? [Y/N] " -n 1 -r
                        echo    # (optional) move to a new line
                        if [[ $REPLY =~ ^[Yy]$ ]]; then
                            reinstall_cydia
                        else
                        echo "You can run ${RED}Reinstall Cydia${STD} from the Patches Menu"
                        pause
                        start_menu
                        fi
                echo -e "After reinstalling Cydia, you may need to run a patch that fixes duplicate sources. This may only be needed if you are using both Sileo and Cydia on unc0ver. Your tweaks and sources will not be erased."
                    read -p "Would you like to patch Cydia? [Y/N] " -n 1 -r

                    echo    # (optional) move to a new line
                        if [[ $REPLY =~ ^[Yy]$ ]]; then
                            run_diatrus_cydia_patch
                        else
                        echo -e "You can run ${RED}Patch Cydia${STD} from the Patches Menu"
                        pause
                        start_menu
                        fi
                pause
                kill_springboard
                start_menu

            else 
            echo "Could not read $BTURELATIVE. Does it exist?"
            pause
            start_menu
            fi
        }
        restore
    
	pause
    start_menu
}
purge_ds_store() {
    if [ ! -w $ROOT ]; then
        # Root directory is not writeable
        echo -e "${RED}Cannot write to root directory. Try running as root?${STD}"
        pause
        start_menu
    fi
    echo "Looking for .DS_STORE files to purge..."
    cd /
    find . -name '.DS_Store' -delete
    echo "Finished pruging .DS_STORE files!"
    pause
}
sync_cydia_to_sileo() {
    coming_soon
}
sync_sileo_to_cydia() {
    coming_soon
}

hard_respring() {
    check_if_root
    echo "Do NOT close terminate this script until your iOS Device has resprung."
    echo "Respringing..."
    ldrestart
    exit 0;
}
kill_springboard() {
    check_if_root
    echo "Killing springboard..." && sleep 1
    killall SpringBoard
    exit 0;
}
run_reboot() {
    echo -e "You are about to reboot your iOS Device. If you are runnning anything ${RED}newer than iOS 9.1${STD}, you are likely using an semi-tethered jailbreak. This means that after a reboot, you will ${RED}temporarily lose your jailbreak${STD}."
    read -p "Are you sure you want to continue? [Y/N] " -n 1 -r
        echo    # (optional) move to a new line
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            reboot
        else
        start_menu
        fi
}
convert_legacy_backups() {
    check_if_root
    echo -e "Legacy Backups are backups made with sourcebackup v0.1 and sourceutility <=0.2-2."
    pause
    echo -e "Legacy Backups, although no longer supported, can still be made by installing sourceutility v0.2-2 or by running sourceutility-legacy ."
    pause
    clear
    echo -e "These backups go by the nomenclature 'backupsources-MM-DD-YYYY.zip' and are usually stored in '/sourceutility'"
    pause
    echo -e "Legacy backups do not include all of the necessary files needed for a backup. This means the backup will be incomplete."
    pause
    read -p "If you wish to continue please press [Y/y] " -n 1 -r
        echo    # (optional) move to a new line
        if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Start of legacy conversion process

            if [ -d $SOURCEBACKUPDIR ]
            then
                read -p $SOURCEBACKUPDIR " already exists. Would you like to delete it? [Y/n] " -n 1 -r
                    echo    # (optional) move to a new line
                    if [[ $REPLY =~ ^[Yy]$ ]]
                    then
                        rm -rfv $SOURCEBACKUPDIR
                    else
                    echo "The backup must be deleted to continue!"
                    pause
                    start_menu
                    fi
            fi

            if [ -d "${SOURCEUTILITYDIR}/backupsources" ]; then
                rm -rfv "${SOURCEUTILITYDIR}/backupsources"
                clear
            fi

            cd /
            
            ls ./sourceutility/backupsources-*.zip
            echo "Enter the date of which backup you would like to convert: (Type 'exit' to leave.)"
                read backupDate

                BACKUPTOUNZIP="$SOURCEUTILITYDIR/backupsources-$backupDate.zip"
                BTURELATIVE="./backupsources-$backupDate.zip"
                LEG_BACKUPDIR="./legacy_backup"
                CONVERTEDBACKUP="./sourcebackup-$backupDate.zip"
                

            if [[ "$backupDate" = 'exit' || "$backupDate" = 'leave' || "$backupDate" = "cancel" || "$backupDate" = "stop" ]]; then
            start_menu
            fi

            if [ -w $BACKUPTOUNZIP ]; then
                echo "Copying $BACKUPTOUNZIP to tmp directory for contingency..."
                cp -r $BACKUPTOUNZIP $SOURCEUTILITYTMP
                echo "Making directory for Legacy Backup..."
                mkdir $LEG_BACKUPDIR
                echo "Unzipping Legacy Backup..."
                unzip -o $BACKUPTOUNZIP
                echo "Unzipped!"
                cd $SOURCEUTILITYDIR
                echo "Creating directories for new backup..."
                mkdir $SOURCEBACKUPDIR
                mkdir $CYDIAPREFSBACKUPDIR
                mkdir $SOURCELISTSBACKUPDIR
                echo "Copying old backup files to new backup..."
                cp -fv "./backupsources/cydia/com.saurik.Cydia.plist" $CYDIAPREFSBACKUPDIR
                cp -afv "./backupsources/sileo/." $SOURCELISTSBACKUPDIR
                echo "Zipping newly converted backup..."
                zip -r9 $CONVERTEDBACKUP $SBDRELATIVE
                echo "Cleaning up..."
                rm -rfv "./backupsources"
                rm -rfv "./legacy_backup"
                rm -rfv $SBDRELATIVE
                cd /
                echo "Finished converting your backup. You can find it at '$SOURCEUTILITYDIR/sourcebackup-$backupDate.zip'."
            else
                echo "Cannot write to $BACKUPTOUNZIP"
            fi

        pause
        else
        start_menu
        fi
    start_menu
}


# function to display start menus
show_menus() {
	clear
    echo ""
    echo ""
	echo ""
    echo ""
    echo ""
    echo ""
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"	
	echo " sourceutility ${VER} by TheHacker "
    echo ""
    decide_if_tip
    echo "~~ Start Menu ~~"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo "1. Backup Cydia and/or Sileo Sources"
    echo "2. Restore Cydia & Sileo Sources"
    echo -e "3. ${RED}Delete Cydia/Sileo Source Backups${STD}"
    echo "4. Convert Legacy Backups"
	echo "5. Sync Cydia Sources to Sileo"
    echo "6. Sync Sileo Sources to Cydia"
    echo -e "7. ${GREEN}Utilities Menu${STD}"
    echo -e "8. ${GREEN}Patches Menu${STD}"
	echo "0. Exit"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
}

read_options(){
	local choice
	read -p "Enter choice [ 0 - 8 ] " choice
	case $choice in
		1) backup_sources ;;
        2) restore_sources ;;
        3) delete_source_backups ;;
        4) convert_legacy_backups ;;
		5) sync_cydia_to_sileo ;;
		6) sync_sileo_to_cydia ;;
        7) utilies_menu ;;
        8) patch_menu ;;
        
        0) exit 0;;
		*) echo -e "${RED}Invalid Option...${STD}" && sleep 2
	esac
}
# function to display start menus
show_u_menus() {
	clear
    echo ""
    echo ""
	echo ""
    echo ""
    echo ""
    echo ""
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"	
	echo " sourceutility ${VER} by TheHacker "
    echo ""
    decide_if_tip
    echo "~~ Other Utilities Menu ~~"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo "1. ldrestart"
    echo "2. uicache"
    echo -e "3. ${RED}Reboot${STD}"
    echo "4. Purge .DS_STORE files"
    echo -e "5. ${RED}Purge Cydia & Sources Lists/Sources${STD}"
    echo "6. apt-get update"
    echo -e "7. ${GREEN}Start Menu${STD}"
    echo -e "8. ${GREEN}Patches Menu${STD}"
    echo "0. Exit"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
}

read_u_options(){
	local choice
	read -p "Enter choice [ 0 - 8 ] " choice
	case $choice in
		1) { 
            hard_respring 
            } || { 
                echo -e "${RED}Could not run ldrestart. Try running as root?${STD}" && sleep 2
                } ;;
        2) { 
            uicache
            } || { 
                echo -e "${RED}Could not run uicache. Try running as root?${STD}" && sleep 2
                } ;;
        3) {
            run_reboot
            } || {
                echo -e "${RED}Could not reboot. Try running as root?${STD}" && sleep 2
            } ;;
        4) purge_ds_store ;;
		5) remove_lists_sources ;;
        6) update_sources ;;
		7) start_menu ;;
        8) patch_menu ;;
        0) exit 0;;
		*) echo -e "${RED}Invalid Option...${STD}" && sleep 2
	esac
}
show_patch_menu() {
    clear
    echo ""
    echo ""
	echo ""
    echo ""
    echo ""
    echo ""
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"	
	echo " sourceutility ${VER} by TheHacker "
    echo ""
    decide_if_tip
    echo "~~ Patches Menu ~~"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo "1. Patch Cydia"
    echo "2. Reinstall Cydia"
    echo "3. Kill Springboard"
    echo "4. Kill Cydia"
    echo "5. Kill Sileo"
    echo -e "6. ${GREEN}Start Menu${STD}"
    echo -e "7. ${GREEN}Utilities Menu${STD}"
    echo "0. Exit"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
}
read_patch_options() {
    local choice
	read -p "Enter choice [ 0 - 7 ] " choice
	case $choice in
		1) run_diatrus_cydia_patch ;;
        2) reinstall_cydia ;;
        3) kill_springboard ;;
		4) kill_cydia ;;
        5) kill_sileo ;;
        6) start_menu ;;
        7) utilies_menu ;;
        0) exit 0;;
		*) echo -e "${RED}Invalid Option...${STD}" && sleep 2
	esac
}
 
# ----------------------------------------------
# Step #3: Trap CTRL+C, CTRL+Z and quit singles
# ----------------------------------------------
trap '' SIGINT SIGQUIT SIGTSTP
 
# -----------------------------------
# Step #4: Main logic - infinite loop
# ------------------------------------

start_menu() {
    cd /
    show_menus
	read_options
}
utilies_menu() {
    cd /
    show_u_menus
    read_u_options
}
patch_menu() {
    cd /
    show_patch_menu
    read_patch_options
}
while true
do
 start_menu
	
done